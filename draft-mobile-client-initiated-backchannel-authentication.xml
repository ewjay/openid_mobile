<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' [
  <!ENTITY OpenID.Core PUBLIC '' 'https://openid.net/bibxml/reference.OpenID.Core.xml'>
  <!ENTITY OpenID.Registration PUBLIC '' 'https://openid.net/bibxml/reference.OpenID.Registration.xml'>
]>
<!--
  NOTE:  This XML file is input used to produce the authoritative copy of an
  OpenID Foundation specification.  The authoritative copy is the HTML output.
  This XML source file is not authoritative.  The statement ipr="none" is
  present only to satisfy the document compilation tool and is not indicative
  of the IPR status of this specification.  The IPR for this specification is
  described in the "Notices" section.  This is a public OpenID Foundation
  document and not a private document, as the private="..." declaration could
  be taken to indicate.
-->
<rfc category="std" docName="draft-mobile-client-initiated-backchannel-authentication-06" ipr="none">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="5" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Draft" ?>
  
  <front>
    <title abbrev="OIDC MODRNA Client initiated Backchannel Authentication Flow 1.0">
            OpenID Connect MODRNA Client initiated Backchannel Authentication Flow 1.0</title>


    <author fullname="Gonzalo Fernandez Rodriguez" initials="G." surname="Fernandez">
      <organization abbrev="Telefonica">Telefonica I+D</organization>
      <address>
        <email>gonzalo.fernandezrodriguez@telefonica.com</email>
      </address>
    </author>

    <author fullname="Florian Walter" initials="F." surname="Walter">
      <organization abbrev="">Deutsche Telekom AG</organization>
      <address>
        <email>F.Walter@telekom.de</email>
      </address>
    </author>

    <author fullname="Axel Nennker" initials="A." surname="Nennker">
      <organization abbrev="">Deutsche Telekom AG</organization>
      <address>
        <email>axel.nennker@telekom.de</email>
      </address>
    </author>

    <author fullname="Dave Tonge" initials="D." surname="Tonge">
      <organization abbrev="Moneyhub">Moneyhub</organization>
      <address>
        <email>dave.tonge@moneyhub.com</email>
      </address>
    </author>

    <author fullname="Brian Campbell" initials="B." surname="Campbell">
      <organization abbrev="Ping Identity">Ping Identity</organization>
      <address>
        <email>bcampbell@pingidentity.com</email>
      </address>
    </author>



    <date day="10" month="January" year="2018"/>
    
    <workgroup>OpenID Mobile Profile Working Group</workgroup>

    <abstract>    
      <t>
        OpenID Connect MODRNA Client initiated Backchannel Authentication Flow 1.0 is an authentication 
        flow like OpenID Connect. Unlike OpenID Connect there is a
        direct Relying Party to OpenID Provider communication without redirects through the user's browser.
        This specification allows an Relying Party that knows the user's identifier to obtain tokens from the
        OpenID Provider. The user consent is given at the user's Authentication Device mediated by the OpenID Provider.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>
        <xref target="OpenID.Core">OpenID Connect</xref> allows Relying Parties (RP) to authenticate their users for clients of all types, including 
        browser-based JavaScript and native mobile apps, to launch sign-in flows and receive verifiable 
        assertions about the identity of signed-in users.
      </t>
      <t>
        In all of these flows initiated by the RP, the end-user interaction from the consumption device is 
        required and, they are based on HTTP redirection mechanisms. However, some use cases not covered by
        these flows have been raised, where the RP needs to be the initiator of the user authentication flow and the end-user interaction
        from the consumption device is not needed.
      </t>
      <t>
        The MODRNA Client initiated Backchannel Authentication Flow specifies a new authentication flow,
        by means of which the RP's that know the user identifier they want to authenticate (e-mail, phone number),
        will be able to initiate an interaction flow to authenticate their users without having end-user interaction
        from the consumption device. The flow is a direct communication from the Client to the OpenID Provider without redirect through the
        user's browser (consumption device).
      </t>
      <t>
        This specification does not change the semantic of the OpenID Connect Authentication flow. 
        It introduces a new endpoint to which the authentication request is posted.
        It introduces a new asynchronous method for authentication result delivery.
        It does not introduce new scope values nor does it change the semantic of standard OpenID Connect parameters.
      </t>
      <t>
        <spanx style="strong">Remark:</spanx> As the user has no consumption device through which the user is interacting with the Client, 
        this flow will not cause any user credentials to go through the RP. So it should be highlighted that traditional username/password 
        authentication could not be used because only out-band mechanisms will work in conjunction with this flow.
      </t>
      <section anchor="rnc" title="Requirements Notation and Conventions">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref target="RFC2119"/>.
        </t>

        <t>
          Throughout this document, values are quoted to indicate that they are
          to be taken literally. When using these values in protocol messages, the
          quotes MUST NOT be used as part of the value.
        </t>
      </section>
    </section>
    <section anchor="terminology" title="Terminology">
      <t>
        This specification uses the terms "OpenID Provider (OP)" and "Relying Party (RP)" as
        defined by <xref target="OpenID.Core">OpenID Connect Core</xref>. Furthermore, it uses the term "client" as 
        defined by <xref target="RFC6749">OAuth 2.0</xref>. OAuth 2.0 Authentication Servers implementing OpenID Connect 
        and CIBA are also referred to as OpenID Providers (OPs). 
        OAuth 2.0 Clients using OpenID Connect and CIBA are also referred to as Relying Parties (RPs).
        This specification also uses the following terms: 
      </t>
      <t>
        <list style="hanging">
          <t hangText="Consumption Device (CD)">
            The Consumption Device is the device that helps the user consume the service.
            In CIBA use cases the user is not necessarily in control of the CD but the CD is in the control
            of an SP agent (e.g. at a Bank teller) or the CD is a SP controlled device (e.g. a petrol pump).
          </t>
          <t hangText="Authentication Device (AD)">
            A mobile device on which the user will authenticate the actual login.
          </t>
        </list>
      </t>
    </section>
    <section anchor="overview" title="Overview">
      <t>
        Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user 
        by means of out-band mechanisms.                 
      </t>
      <t>
      <list style="numbers">
		    <t>
          The Client shall make an "HTTP POST" request to the Backchannel Authentication Endpoint to ask for end-user
          authentication. 
		    </t>
		    <t>
          The OP will respond immediately with a unique identifier that identifies that authentication while it tries 
          to authenticate the user in the background. 
		    </t>
		    <t>
          The Client will receive the ID Token, Access Token and optionally Refresh Token by means of either the Poll,  
          Ping or Push modes, this choice MUST be established by the Client at the registration time.
          <list style="hanging">
           <t hangText="Poll Mode">
              When configured in Poll mode, the Client will poll the token endpoint to get a response with the tokens. 
            </t>
          <t hangText="Ping Mode">
              When configured in Ping mode, the OP will send a request to a callback uri previously 
              registered by the Client with the unique identifier returned from the Backchannel Authentication Endpoint.
              Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.
            </t>
            <t hangText="Push Mode">
              When configured in Push mode, the OP will send a request with the tokens to a callback uri previously 
              registered by the Client.
            </t>

          </list>
        </t>
		  </list>
      </t>
    </section>
   <section anchor="registration" title="Registration and Discovery Metadata">
   <t>
      <list style="hanging">
        <t hangText="Grant Type">
          This specification introduces the backchannel request grant type (an extension grant type as defined by 
          Section 4.5 of <xref target="RFC6749">OAuth 2.0</xref>) with the value: 
          <spanx style="verb">urn:openid:params:modrna:grant-type:backchannel_request</spanx>
        </t>
        <t hangText="OpenID Provider Metadata">
          OPs supporting the ping or poll modes of CIBA SHOULD include the backchannel request grant type in the <spanx style="verb">grant_types_supported</spanx> field of their discovery metadata
          and SHOULD publish the supported token delivery modes for clients using CIBA. The location of an OP's Backchannel Authentication Endpoint SHOULD be published in metadata.
          OPs that support signed authentication request SHOULD publish the algorithms supported for signature verification.
          The following authorization server metadata parameters are introduced by this specification:
        </t>
        <t>
          <list style="symbols">
            <t><spanx style="verb">backchannel_token_delivery_modes_supported</spanx>: a JSON array containing one or more of the
            following values <spanx style="verb">poll</spanx>, <spanx style="verb">ping</spanx> and <spanx style="verb">push</spanx>.</t>
            <t><spanx style="verb">backchannel_authentication_endpoint</spanx>: URL of the OP's Backchannel Authentication Endpoint
              as defined in <xref target="auth_backchannel_endpoint"/>.</t>
            <t><spanx style="verb">backchannel_authentication_request_signing_alg_values_supported</spanx>:
              JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for signed authentication requests,
              which are described in <xref target="signed_auth_request"/>.
              If omitted, signed authentication requests are not supported by the OP.</t>
          </list>
        </t>

        <t hangText="Client Metadata">
          Clients registering to use CIBA MUST indicate a token delivery mode. When using the ping or poll mode, the client MUST
          include the backchannel grant type in the "grant_types" field and MUST also register a client notification
          endpoint. Clients intending to send signed authentication requests MUST register the signature algorithm that will be used.
          The following parameters are introduced by this specification:
        </t>
        <t>
          <list style="symbols">
            <t><spanx style="verb">backchannel_token_delivery_mode</spanx>: REQUIRED - one of the following values <spanx style="verb">poll</spanx>, 
            <spanx style="verb">ping</spanx> or <spanx style="verb">push</spanx></t> 
            <t><spanx style="verb">client_notification_endpoint</spanx>: REQUIRED if the token delivery mode is set to 
            <spanx style="verb">ping</spanx> or <spanx style="verb">push</spanx>. This is the endpoint to which the OP will post a notification after a successful or failed end-user authentication.
            It MUST be an HTTPS URL.
            </t>
            <t><spanx style="verb">backchannel_authentication_request_signing_alg</spanx>:
            The JWS algorithm <spanx style="verb">alg</spanx> value that the client will use for signing authentication request, as described in <xref target="signed_auth_request"/>.
            When omitted, the client will not send signed authentication requests.</t>
          </list>
        </t>


    
            <t hangText="Polling and Pairwise Identifiers">
              The downside of using the polling mechanism to get the tokens is that is not possible to use Pairwise Pseudonymous Identifiers (PPIDs)
              unless the Client registers a URI that is of its ownership and it use it during the authentication process in order to verify that
              such URI belongs to the client and so it can be considered as a "sector_identifier_uri" to generate the PPIDs.
            </t>
            <t>
              The only way that CIBA generates Pairwise Pseudonymous Identifiers is by providing a "jwks_uri" at the registration phase when the
              "urn:openid:params:modrna:grant-type:backchannel_request" grant type is registered. In that way the OpenID Provider will have a uri to set as a "sector_identifier_uri" and
              it will utilize it to generate the PPIDs. So, whenever the OpenID Provider receive an dynamic registration request it MUST check if a valid
              "jwks_uri" is set when the backchannel request grant type is present in the list of the grant types required.

              If a "sector_identifier_uri" is explicitly provided, then the "jwks_uri" must be included in the list of URIs pointed by "sector_identifier_uri".
            </t>            
            <t>
              But having registered a "jwks_uri" is not enough to use PPIDs, Client needs somehow to demonstrate that such "jws_uri" belongs to it. 
              It is therefore MANDATORY for the Client to authenticate the token endpoint using one of this two mechanisms:
              <vspace />
              <vspace />
              <list style="numbers">
                <t>
                  Using the <eref target="https://tools.ietf.org/html/draft-ietf-oauth-mtls#section-2.1">PKI Mutual TLS OAuth Client Authentication Method</eref> as defined in section 2.1 of
                  <xref target="I-D.ietf-oauth-mtls"/>
                </t> 
                <t>
                  Using the private_key_jwt method as per the section 9 <eref target="https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication">Client Authentication</eref>
                  of the <xref target="OpenID.Core"/>, otherwise it MUST respond with an invalid_request error.
                </t> 
              </list>
              Signed authentication request with the asymmetric keys provided by the "jwks_uri" are OPTIONAL.
            </t>

            <t hangText="Ping and Push Modes with Pairwise Identifiers">
              When using Ping or Push modes, the PPIDs will use the "client_notification_endpoint" as a "sector_identifier_uri". In case a "sector_identifier_uri"
              is explicitly provided, then the "client_notification_endpoint" must be included in the list of URIs pointed by "sector_identifier_uri".
            </t>      
        </list>
        <figure>
          <preamble>The following is a non-normative example from an dynamic registration request that contains the backchannel request grant type
          as required and a "jwks_uri" (with line wraps within values for display purposes only).
          </preamble>
          <artwork>
              <![CDATA[
    POST /connect/register HTTP/1.1
    Content-Type: application/json
    Accept: application/json
    Host: server.example.com
    Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJ ...

    {
        "application_type": "web",
        "client_name": "My Example",
        "logo_uri": "https://client.example.org/logo.png",
        "subject_type": "pairwise",
        "token_endpoint_auth_method": "private_key_jwt",
        "grant_types": ["urn:openid:params:modrna:grant-type:backchannel_request"],
        "backchannel_token_delivery_mode": "poll",
        "jwks_uri": "https://client.example.org/my_public_keys.jwks",
        "userinfo_encrypted_response_alg": "RSA1_5",
        "userinfo_encrypted_response_enc": "A128CBC-HS256",
        "contacts": ["ve7jtb@example.org", "mary@example.org"]
    }
                ]]>
          </artwork>
        </figure>      
      </t>
    </section>

   <section title='Poll, Ping and Push Modes'>

      <t>
        This specification allows the Client to get the authentication result in three ways: poll, ping or push.
      </t>
      <t>
        In the Poll mode, the authentication result is retrieved by the Client by polling the OP's token endpoint using the new grant type. 
      </t>
      <t>
        In the Ping mode, the OP will post the unqiue identifier of the authentication session to the Client, the 
        Client will then retrieve the authentication result from the token endpoint using the new grant type.
      </t>
      <t>
        In the Push mode, the OP will post the full authentication result to the Client.
      </t>
   

      <figure>
        <preamble>
        CIBA Poll Mode is illustrated in the following diagram:
        </preamble>
        <artwork>
        +--------+                                               +--------+
        |        |                                               |        |
        |        |&lt;---(1) CIBA Request--------------------------&gt;|        |
        |        |                                               |        |
        |        |  +--------+                                   |        |
        |        |  |        |                                   |        |
        | Client |  |  AD    |&lt;--(2) User interactions ---------&gt;|   OP   |
        |        |  |        |                                   |        |
        |        |  +--------+                                   |        |
        |        |                                               |        |
        |        |----(3a) CIBA Polling Request-----------------&gt;|        |
        |        |&lt;---(3b) CIBA Polling Response-----------------|        |
        |        |                ...                            |        |
        |        |----(3a) CIBA Polling Request-----------------&gt;|        |
        |        |&lt;---(3b) CIBA Polling Response-----------------|        |
        |        |                                               |        |
        +--------+                                               +--------+
        </artwork>
      </figure>

      <figure>
        <preamble>
        CIBA Ping Mode is illustrated in the following diagram:
        </preamble>
        <artwork>
        +--------+                                               +--------+
        |        |                                               |        |
        |        |&lt;---(1) CIBA Request--------------------------&gt;|        |
        |        |                                               |        |
        |        |  +--------+                                   |        |
        |        |  |        |                                   |        |
        | Client |  |  AD    |&lt;--(2) User interactions ---------&gt;|   OP   |
        |        |  |        |                                   |        |
        |        |  +--------+                                   |        |
        |        |                                               |        |
        |        |&lt;---(3) CIBA Ping Callback------------------|        |
        |        |                                               |        |
        |        |----(4a) CIBA Token Request-------------------&gt;|        |
        |        |&lt;---(4b) CIBA Token Response-------------------|        |
        +--------+                                               +--------+
        </artwork>
      </figure>

      <figure>
        <preamble>
        CIBA Push Mode is illustrated in the following diagram:
        </preamble>
        <artwork>
        +--------+                                               +--------+
        |        |                                               |        |
        |        |&lt;---(1) CIBA Request--------------------------&gt;|        |
        |        |                                               |        |
        |        |  +--------+                                   |        |
        |        |  |        |                                   |        |
        | Client |  |  AD    |&lt;--(2) User interactions ---------&gt;|   OP   |
        |        |  |        |                                   |        |
        |        |  +--------+                                   |        |
        |        |                                               |        |
        |        |&lt;---(3) CIBA Push Callback -----------------|        |
        |        |                                               |        |
        +--------+                                               +--------+
        </artwork>
      </figure>
    </section>

    <section title='Examples of Use Cases'>
        <t>The following use cases are non-normative examples to illustrate the usage of this specification.</t>
        <t>
        <list style="numbers">
        <t>A call center agent wants to authenticate a caller. 
        Using additional scopes like e.g. "profile" or "phone" the call center agent would get access to claims
        about the user like "phone_number" and "phone_number_verified".
        </t>
        <t>A bank teller wants to authenticate a customer in a bank branch - using CIBA for authentication in a face-to-face scenario.
        </t>
        </list>
        </t>
    </section>

    <section anchor="auth_backchannel_endpoint" title="Backchannel Authentication Endpoint">
      <t>
        The Backchannel Authentication Endpoint is used to initiate an out-of-band authentication of the End-User. This is done by sending an HTTP
        POST message directly from the Client to the OpenID Provider's Backchannel Authentication Endpoint, using 
        a request defined in the following subsections.
      </t>
      <t>
        Communication with the Backchannel Authentication Endpoint MUST utilize TLS. See Section 16.17 <xref target="OpenID.Core"/>
        for more information on using TLS.
      </t>

      <section anchor="auth_request" title="Authentication Request">
        <t>
          MODRNA Client initiated Backchannel Authentication defines an authentication request that is requested directly from 
          the Client to the OpenID Provider without going through the user's browser. The Client MUST send an authentication 
          request to the OpenID Provider by building an "HTTP POST" request that will take to the OpenID Provider all the 
          information needed to authenticate the user without asking them for their identifier.      
        </t>
        <t>
          The Client MUST authenticate to the Backchannel Authentication Endpoint using the authentication method registered for its 
          client_id, such as the authentication methods from Section 9 of <xref target="OpenID.Core"/> or authentication methods
          defined by extension in other specifications.
        </t>
        <t>
          An authentication request is composed of the following parameters:
        </t>
        <t>
          <list style="hanging">
            <t hangText="scope">
              REQUIRED. OpenID Connect implements authentication as an extension to the OAuth 2.0 by including the 
              "openid" scope value in the Authorization Request.
            </t>
            <t hangText="client_notification_token">
              REQUIRED if the Client is registered to use Ping or Push modes. 
              It is a bearer token provided by the Client that will be used by the OpenID Provider to authenticate the callback request to the Client.
              The length of the token MUST NOT exceed 1024 characters and it MUST conform to the syntax for Bearer credentials as defined in Section 2.1 of <xref target="RFC6750"/>.
              Clients should ensure that it contains sufficient entropy (at least 128 bits) or be otherwise protected such as to make
              to brute force guessing or forgery of a valid token computationally infeasible.
            </t>
            <t hangText="acr_values">
              OPTIONAL. Requested Authentication Context Class Reference values.
              Space-separated string that specifies the acr values that the Authorization Server is being requested to use for
              processing this Authentication Request, with the values appearing in order of preference.
              The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value of the ID Token.
            </t>

            <t hangText="login_hint_token">
              OPTIONAL. As defined in <xref target="MODRNA.Authentication" format="title"/>.
            </t> 

            <t hangText="id_token_hint">
              OPTIONAL. As defined in Section 3.1.2.1 of <xref target="OpenID.Core"/>.
            </t> 
            <t hangText="login_hint">
              OPTIONAL. As defined in Section 3.1.2.1 of <xref target="OpenID.Core"/>.
            </t> 
            <t hangText="binding_message">
              OPTIONAL. As defined in <xref target="MODRNA.Authentication" format="title"/>.
            </t>
          </list>
        </t>
        <t>
          As the Client initiated Backchannel Authentication flow does not have an interaction with the end-user through a consumption device, 
          it is REQUIRED that the Client provides one (and only one) of the hints specified above in the authentication request, that is "login_hint_token", 
          "id_token_hint" or "login_hint".
        </t>
        <t>
          An authentication request is made using the
          HTTP <spanx style='verb'>POST</spanx> method with the aforementioned
          parameters in the <spanx style='verb'>application/x-www-form-urlencoded</spanx>
          format and a character encoding of UTF-8 in the HTTP request entity-body.
        </t>
        <figure>
          <preamble>The following is a non-normative example of an authentication request (with line wraps within values for display purposes only):
          </preamble>
          <artwork>
       <![CDATA[
   POST /bc-authorize HTTP/1.1
   Host: server.example.com
   Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
   Content-Type: application/x-www-form-urlencoded

   scope=openid&
   client_notification_token=8d67dc78-7faa-4d41-aabd-67707b374255&
   acr_values=mod-mf&x
   login_hint_token=eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.
   OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe
   ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb
   Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV
   mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8
   1860ppamavo35UgoRdbYaBcoh9QcfylQr66oc6vFWXRcZ_ZT2LawVCWTIy3brGPi
   6UklfCpIMfIjf7iGdXKHzg.
   48V1_ALb6US04U3b.
   5eym8TW_c8SuK0ltJ3rpYIzOeDQz7TALvtu6UG9oMo4vpzs9tX_EFShS8iB7j6ji
   SdiwkIr3ajwQzaBtQD_A.
   XFBoMYUZodetZdvTiFvSkQ
       ]]>
          </artwork>
        </figure>
        <section title="Signed Authentication Request" anchor="signed_auth_request">
        <t>
          A signed authentication request can be made by encoding the authentication request parameters as
          claims of a signed JWT, with each parameter name as the claim name and its value as a JSON string.
          The JWT MUST be secured with an asymmetric signature and follow the guidance from
          <eref target="https://openid.net/specs/openid-connect-core-1_0.html#Signing">Section 10.1</eref> of
          <xref target="OpenID.Core"/> regarding asymmetric signatures.
          The signed authentication request JWT is passes as an <spanx style='verb'>application/x-www-form-urlencoded</spanx>
          HTTP request parameter with the name <spanx style='verb'>request</spanx>.
          The JWT MUST also contain the following <xref target="RFC7519"/> registered claims:
        </t>
        <t>
          <list style="hanging">
            <t hangText="aud">
              The Audience claim must contain the value of the Issuer Identifier for the OP, which identifies the Authorization Server as an intended audience.
            </t>
            <t hangText="iss">
              The Issuer claim must be the <spanx style="verb">client_id</spanx> of the OAuth Client.
            </t>
            <t hangText="exp">
              An expiration time that limits the validity lifetime of the signed authentication request.
            </t>
            <t hangText="iat">
              The time at which the signed authentication request was created.
            </t>
            <t hangText="jti">
              A unique identifier for the signed authentication request.
            </t>
          </list>
        </t>
        <figure>
          <preamble>For example, a signed authentication request using the same authentication request parameters and values
            as the example from the previous section would look like the following (with line wraps within values for display purposes only):
          </preamble>
          <artwork>
            <![CDATA[
   POST /bc-authorize HTTP/1.1
   Host: server.example.com
   Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
   Content-Type: application/x-www-form-urlencoded

   request=eyJraWQiOiJsdGFjZXNidyIsImFsZyI6IlJTMjU2In0.eyJpc3MiOiJz
   NkJoZFJrcXQzIiwiYXVkIjoiaHR0cDovL3NlcnZlci5leGFtcGxlLmNvbSIsImV4
   cCI6MTUzNzgyMDA4NiwiaWF0IjoxNTM3ODE5NDg2LCJqdGkiOiI0TFRDcUFDQzJF
   U0M1QldDbk4zajU4RW5BIiwic2NvcGUiOiJvcGVuaWQiLCJjbGllbnRfbm90aWZp
   Y2F0aW9uX3Rva2VuIjoiOGQ2N2RjNzgtN2ZhYS00ZDQxLWFhYmQtNjc3MDdiMzc0
   MjU1IiwiYWNyX3ZhbHVlcyI6Im1vZC1tZiIsImxvZ2luX2hpbnRfdG9rZW4iOiJl
   eUpoYkdjaU9pSlNVMEV0VDBGRlVDSXNJbVZ1WXlJNklrRXlOVFpIUTAwaWZRLk9L
   T2F3RG8xM2dScDJvamFIVjdMRnBaY2dWN1Q2RFZaS1R5S09NVFlVbUtvVENWSlJn
   Y2tDTDlraU1UMDNKR2VpcHNFZFkzbXhfZXRMYmJXU3JGcjA1a0x6Y1NyNHFLQXE3
   WU43ZTlqd1FSYjIzbmZhNmM5ZC1TdG5JbUd5RkRiU3YwNHVWdXhJcDVabXMxZ054
   S0tLMkRhMTRCOFM0cnpWUmx0ZFl3YW1fbERwNVhuWkFZcFFkYjc2RmRJS0xhVm1x
   Z2Z3WDdYV1J4djIzMjJpLXZEeFJmcU56b190RVRLenBWTHpmaXdReWV5UEdMQklP
   NTZZSjdlT2JkdjBqZTgxODYwcHBhbWF2bzM1VWdvUmRiWWFCY29oOVFjZnlsUXI2
   Nm9jNnZGV1hSY1pfWlQyTGF3VkNXVEl5M2JyR1BpNlVrbGZDcElNZklqZjdpR2RY
   S0h6Zy40OFYxX0FMYjZVUzA0VTNiLjVleW04VFdfYzhTdUswbHRKM3JwWUl6T2VE
   UXo3VEFMdnR1NlVHOW9NbzR2cHpzOXRYX0VGU2hTOGlCN2o2amlTZGl3a0lyM2Fq
   d1F6YUJ0UURfQS5YRkJvTVlVWm9kZXRaZHZUaUZ2U2tRIn0.DnK-GIVtB2SYhzO-
   wjgF3l9u_UvQ-dHFZnWrW3tV2vR0OkiYeH_vdzt7G-I6BylGw2WN7nE_lJJkolT4
   1625Oh8xOcrycPGmDMTQlz73HgrMx8FZkan9XKT1W8CrNDhPw_FpFxxarEOBfss8
   DM8Vw9LkdutY3_a_U-PGqOmXphU_9Y4Kx6aBRqJm1bLbzy5mrzwU4WbusqnKtakT
   waN31DX9mvTlztzQzdH1TmdugnCvJ5LZ5laXdq8ca4IxBl-rJAUar58F34dxMyHw
   xcC4djEL1nvr2MuXUUEZ-N31HW-78S0JwoXnHKB1cQBSObSRLaNlbulAxCDd7E9g
   SycxDA
       ]]>
          </artwork>
        </figure>

      <figure>
        <preamble>Where the following is the JWT payload (with line wraps and added whitespace for display purposes only):
        </preamble>
        <artwork>
          <![CDATA[
    {
     "iss": "s6BhdRkqt3",
     "aud": "http://server.example.com",
     "exp": 1537820086,
     "iat": 1537819486,
     "jti": "4LTCqACC2ESC5BWCnN3j58EnA",
     "scope": "openid",
     "client_notification_token": "8d67dc78-7faa-4d41-aabd-67707b374255",
     "acr_values": "mod-mf",
     "login_hint_token": "eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ
       00ifQ.OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL
       9kiMT03JGeipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6
       c9d-StnImGyFDbSv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5
       XnZAYpQdb76FdIKLaVmqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQy
       eyPGLBIO56YJ7eObdv0je81860ppamavo35UgoRdbYaBcoh9QcfylQr66oc6
       vFWXRcZ_ZT2LawVCWTIy3brGPi6UklfCpIMfIjf7iGdXKHzg.48V1_ALb6US
       04U3b.5eym8TW_c8SuK0ltJ3rpYIzOeDQz7TALvtu6UG9oMo4vpzs9tX_EFS
       hS8iB7j6jiSdiwkIr3ajwQzaBtQD_A.XFBoMYUZodetZdvTiFvSkQ"
    }
       ]]>
        </artwork>
      </figure>
        </section>
    </section>

      <section anchor="auth_request_validation" title="Authentication Request Validation">
        <t>
          The OpenID Provider MUST validate the request received as follows:
        </t>
        <t>
          <list style="numbers">
            <t>
              Authenticate the Client per the authentication method registered or configured for its client_id.
              <vspace />
              It is RECOMMENDED that Clients do not send shared secrets in the Authentication Request. 
              It is RECOMMENDED that public key cryptography is used.
              <vspace />
            </t>
            <t>
              If the authentication request is signed, validate the JWT sent with the <spanx style='verb'>request</spanx> parameter, which includes
              verifying the signature and ensuring that the JWT is valid in all other respects per <xref target="RFC7519"/>.
            </t>
            <t>
              Validate all the authentication request parameters.
              In the event the request contains more than one of the hints specified in <xref target="auth_request">Authentication Request</xref>,
              the OpenID Provider MUST return an "invalid_request" error response as per <xref target="auth_error_response"/>.
            </t>
            <t>
              The OpenID Provider MUST process the hint provided to determine if the hint is valid and if it corresponds to a valid user. The type, issuer (where applicable) and maximum age (where applicable) of a hint that an OP accepts should be communicated to Clients. How the OP validates hints and informs Clients of its hint requirements is out-of-scope of this specification.
            </t>
               
            <t>
              If the hint is not valid or if the OP is not able to determine the user then 
              an error should be returned to the Client as per section <xref target="auth_error_response" format="title"/>.
            </t>
            <t>
              The OpenID Provider MUST verify that all the REQUIRED parameters are present and their usage conforms to this 
              specification.
            </t>
          </list>
        </t>
        <t>
            OpenID Providers SHOULD ignore unrecognized request parameters.
        </t>          
        <t>
            If the OpenID Provider encounters any error, it MUST return an error response, per <xref target="auth_error_response"/>.
         </t>       
      </section>

      <section anchor="successful_authentication_request_acknowdlegment" title="Successful Authentication Request Acknowledgement">
        <t>
          If the <xref target="auth_request" format="title"/> is validated as per Section <xref target="auth_request_validation" format="title"/>, 
          the OpenID Provider will return an HTTP 200 OK response to the Client
          to indicate that the authentication request has been accepted and it is going to be processed. The body of this response will contain:
        </t>
        <t>
          <list style="hanging">
            <t hangText="auth_req_id">
              REQUIRED. This is a unique id to identify the authentication request made by the Client. 
             </t>
            <t hangText="expires_in">
              REQUIRED. Expiration time of the "auth_req_id" in seconds since the authentication request was received. A Client calling the token endpoint with an expired <spanx style="verb">auth_req_id</spanx> will receive an error, see <xref target="token_error_response" format="title"/>.
             </t>
            <t hangText="interval">
              OPTIONAL. The minimum amount of time in seconds that the Client MUST wait between polling requests to the token endpoint. 
              This parameter will only be present if the Client is registered to use the Poll or Ping modes.
             </t>
          </list>
        </t>
        <figure> 
          <preamble>The following is a non-normative example from an authentication response
          </preamble>
          <artwork>
            <![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store

    {
      "auth_req_id": "1c266114-a1be-4252-8ad1-04986c5b9ac1",
      "expires_in": 3600,
      "interval": 2
    }
            ]]>
          </artwork>
        </figure>      
      </section>

      <section anchor="auth_request_acknowdlegment_validation" title="Authentication Request Acknowledgment Validation">
        <t>
          If the Client receives an HTTP 200 OK, it MUST validate that all the required parameters are received. 
        </t>
        <t>
          The Client MUST keep the <spanx style="verb">auth_req_id</spanx> in order to validate the callbacks received in Ping and Push modes or to use when polling the token endppint in Poll mode.
        </t>
        <t>
          The Client should store the expiration time in order to clean up authentication requests for which
          no Ping Callback or Push Callback is received. 
        </t>
      </section>

    </section>

    <section anchor="auth_server_obtains_consent" title="OpenID Provider Obtains End-user Consent/Authorization">
      <t>
        After the OP has validated the Authentication Request and the OP identifies the user's Authentication Device (AD).
        The OP chooses a channel to best contact the AD and fulfill the Client's requirements regarding acr_values.
      </t>
      <t>
        Once the End-User is authenticated, the OpenID Provider MUST obtain an authorization decision before 
        releasing information to the Client. As in OAuth2 and as in OpenID Connect the OP informs the user
        about the current Authentication Request e.g.: Which Client is requesting which information and which
        access.
      </t>
      <t>
        When using the Client initiated Backchannel Authentication flow, 
        there is not any interactive dialogue between the OpenID Provider and the end-user through the user's consumption device. 
        There might be an agent of the Client involved who transfers the binding_message to the user.
      </t>
      <t>
        The consent establishing only can take place via the authentication device or by establishing consent 
        via conditions for processing the request or other means (for example, via previous administrative consent). 
        Sections 2 and 5.3 of <xref target="OpenID.Core"/> describe information release mechanisms.
      </t>
      <t>
        NOTE: the current version of the Client initiated Backchannel Authentication Flow spec. does not specify any mechanism to use the authentication device to obtain the end-user consent.
      </t>
    </section>

      <section anchor="client_notification_endpoint" title="Client Notification Endpoint">
          <t>
            The Client Notification Endpoint is set by the Client during <xref target="registration" format="title"/>. It is the endpoint the OP will call after a succesful or failed end-user authentication. 
          </t>

          <t>
            It MUST be an HTTPS URL and Communication with the Client Notification Authentication Endpoint MUST utilize TLS. See Section 16.17 <xref target="OpenID.Core"/> 
            for more information on using TLS.
          </t>

          <t>
            When the Client is configured in Ping mode, the endpoint receives a notification from the OP that an Authentication Result is ready to be retrieved from the Token Endpoint.
          </t>

          <t>
            When the Client is configured in Push mode, the endpoint receives the Authentication Result (an id_token, access_token and, optionally, refresh token or in the event that the user did not grant authorisation, an error).
          </t>
            
          <t>
            Requests to the Client Notification Endpoint must be authenticated using a "bearer token" created by the Client and sent to the OP in the Authentication request as the value of the parameter "client_notification_token".
          </t>
        

        </section>

    <section anchor="getting_transaction_result" title="Getting the Authentication Result">
      <t>
        The token delivery mode for the Client (Poll Ping or Push) is determined at registration time.
      </t>
      <t>
        A client can only register a single token delivery method and the OP MUST only deliver the Authentication Result to the client through the registered mode.
      </t>

      <section anchor="token_request" title="Token Request Using Backchannel Request Grant Type">
        <t>
          If the Client registered to use Poll or Ping modes, the Client will retrieve the Authentication Result from the token endpoint.
        </t>
        <t>
        The Client MUST be authenticated as specified in Section 9 of <xref target="OpenID.Core"/>.
        </t>
        <t>
          If the Client is registered to use the Poll mode, then the Client polls the token endpoint at reasonable interval, which MUST NOT be more frequent than the minimum interval provided by the OpenID Provider via the "interval" parameter (if provided).
        </t>
        <t>
          If the Client is registered to use the Ping mode, then when the Client receives a notification to its
          Client Notification Endpoint containing an auth_req_id that is verified against a client_notification_token, it must call the token endpoint to retrieve the authentication result. 
        </t>
        <t>
          NOTE: A Client configured in Ping mode, may also poll the token endpoint. The OpenID Provider must treat such a Client as if was registered to use the Poll mode. 
        </t>
        <t>
          The Client makes a "POST" request to the token endpoint by sending the following parameters using the "application/x-www-form-urlencoded" format with a character encoding of UTF-8 
          in the HTTP request entity-body:
        </t>
        <t>
          <list style="hanging">
            <t hangText="grant_type">
              REQUIRED.  Value MUST be set to <vspace/><spanx style="verb">urn:openid:params:modrna:grant-type:backchannel_request</spanx>
             </t>
            <t hangText="auth_req_id">
              REQUIRED. It is the unique id to identify the authentication request (transaction) made by the Client.
              The OP MUST check whether the auth_req_id was issued to this Client in response to an <xref target="auth_request" format="title"/>.
              Otherwise, an error MUST be returned.
             </t>
          </list>
        </t>    
        <figure>
          <preamble>The following is a non-normative example of a token request (with line wraps within values for display purposes only).
          </preamble>
          <artwork>
    <![CDATA[
    POST /token HTTP/1.1
    Host: server.example.com
    Content-Type: application/x-www-form-urlencoded
    Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

    grant_type=urn%3Aopenid%3Aparams%3Amodrna%3Agrant-type%3Abackchannel_request
      &auth_req_id=1c266114-a1be-4252-8ad1-04986c5b9ac1

    ]]>
          </artwork>
        </figure>
     

      <section anchor="token_response" title="Successful Token Response">
        <t>
          After receiving and validating a valid and authorized Token Request from the Client and when the End-User associated with the supplied <spanx style="verb">auth_req_id</spanx> has been authenticated and has authorized the request, the OpenID Provider returns a successful response that includes an ID Token, Access Token and optionally a Refresh Token as specified in Section 3.1.3.3 of <xref target="OpenID.Core"/>. 

          If the End-User associated with the supplied <spanx style="verb">auth_req_id</spanx> has not been authenticated or has not authorized the request, an error response must be sent as defined in <xref target="token_error_response" format="title"/>.
        </t>      
        <figure>
          <preamble>The following is a non-normative example of a successful token response
           (with line wraps within values for display purposes only).
          </preamble>
          <artwork>
            <![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store

    {
     "access_token": "SlAV32hkKG",
     "token_type": "Bearer",
     "refresh_token": "8xLOxBtZp8",
     "expires_in": 3600,
     "id_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc
       yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5
       NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ
       fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz
       AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q
       Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ
       NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd
       QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS
       K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4
       XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg"
    }
            ]]>
          </artwork>
        </figure>
      </section>   
       </section>

        <section anchor="ping_callback" title="Ping Callback">
          <t>
            If the Client is registered in Ping mode, the OpenID Provider will send a "POST HTTP Request"  
            to the <xref target="client_notification_endpoint" format="title"/> either when the End-User is well authenticated and has authorized the request or if the End-User has denied the request.
          </t>
          <t>
            In this mode the OP sends the <spanx style="verb">client_notification_token</spanx> as a bearer token in the Authorization header field and sends only the auth_req_id in the body of the request. The request uses the application/json media type.
          </t>
          <figure>
            <preamble>The following is a non-normative example of a Ping callback sent as a HTTP POST 
              request to the Client's client_notification_endpoint (with line wraps within values for display purposes only).
            </preamble>
            <artwork>
              <![CDATA[
    POST /cb HTTP/1.1
    Host: client.example.com
    Authorization: Bearer 8d67dc78-7faa-4d41-aabd-67707b374255
    Content-Type: application/json

    {
     "auth_req_id": "1c266114-a1be-4252-8ad1-04986c5b9ac1"
    }
              ]]>
            </artwork>
          </figure>
          <t>
            The Client MUST verify the <spanx style="verb">client_notification_token</spanx> used to authenticate the request is valid and is associated with the <spanx style="verb">auth_req_id</spanx> received in the Ping callback. If the bearer token is not valid the Client SHOULD return a HTTP 401 Unauthorized response.
          </t>
          <t>
            For valid requests, the Client Notification Endpoint SHOULD respond with a HTTP 204 No Content.
            The OP SHOULD also accept responses with HTTP 200 OK, any body in the response SHOULD be ignored.
          </t>
          <t>
              The Client MUST NOT return an HTTP 3xx code. The OP MUST NOT follow redirects.
          </t>
          <t>
            How the OP handles HTTP error codes in the ranges of 4xx and 5xx is out-of-scope of this specification.
            Administrative action is likely to be needed in these cases.
          </t>

          <t>
            For valid requests, the Client MUST use the received <spanx style="verb">auth_req_id</spanx> to make a Token Request using the Backchannel Request Grant Type to the Token Endpoint as described in <xref target="token_request" format="title"/>.

          </t>
       
      </section>


      <section anchor="push_callback" title="Push Callback">
        <section anchor="issuing_successful_token" title="Successful Token Delivery">
          <t>
            If the Client is registered in Push mode and the user is well authenticated and has authorized the request, the OpenID Provider delivers a payload that includes an ID Token, an Access Token and, optionally, a Refresh Token to the <xref target="client_notification_endpoint" format="title"/>.
          </t>
          <t>
            Error conditions associated with the authentication request are delivered to the Client by sending a <xref target="push_error_payload" format="title"/>  to the <xref target="client_notification_endpoint" format="title"/>.
          </t>
          <t>
            The Push Callback uses the parameters defined for a succesful token response in Section 4.1.4 of <xref target="RFC6749">OAuth 2.0</xref> and Section 3.1.3.3 of <xref target="OpenID.Core"/>. In addition a new parameter "auth_req_id" is included in the payload. This is the authentication request identifier as defined in <xref target="successful_authentication_request_acknowdlegment">Successful Authentication Response</xref>. 
          </t>
          <t>
            The Push Callback uses the application/json media type.
          </t>
           <t>
              In order to bind the ID Token, Access Token and the auth_req_id, the OP MUST include the hash value of the Access Token and the auth_req_id within the ID Token. 
              In case a Refresh Token is sent to the Client, the hash value of it MUST be added to the ID too. Section 3.1.3.6 of <xref target="OpenID.Core"/> shows how to calculate the hash value of the access_token "at_hash",
              the same method can also be applied to calculate the Refresh Token hash value.
        </t>
          <figure>
            <preamble>The following is a non-normative example of a Push Callback sent as a HTTP POST 
              request to the Client's notification endpoint (with line wraps within values for display purposes only).
              The request is authenticated through a bearer token that is the value of the "client_notification_token" provided by the Client in the Authentication Request.
            </preamble>
            <artwork>
              <![CDATA[
    POST /cb HTTP/1.1
    Host: client.example.com
    Authorization: Bearer 8d67dc78-7faa-4d41-aabd-67707b374255
    Content-Type: application/json

    {
     "auth_req_id": "1c266114-a1be-4252-8ad1-04986c5b9ac1",
     "access_token": "SlAV32hkKG",
     "token_type": "Bearer",
     "refresh_token": "8xLOxBtZp8",
     "expires_in": 3600,
     "id_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc
       yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5
       NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ
       fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz
       AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q
       Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ
       NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd
       QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS
       K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4
       XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg"
    }
              ]]>
            </artwork>
          </figure>
        <t>
          The Client MUST verify the client_notification_token used to authenticate the request is valid and is associated with the auth_req_id received in the Push Callback. If the bearer token is not valid the Client SHOULD return a HTTP 401 Unauthorized response.
        </t>
        <t>
          The Client MUST validate the ID Token, which acts as a detached signature, as per Section 3.1.3.7 of <xref target="OpenID.Core"/>.
        </t>
        <t>
        The Client MUST ensure that that the auth_req_id in the ID Token matches the auth_req_id in the request.
        </t>
        <t>
        The Client MUST validate the access token received in request using the at_hash in the ID Token as per Section 3.2.2.9 of <xref target="OpenID.Core"/>. If a refresh token is present in the request, the Client MUST validate it using the rt_hash in the ID Token in a similar manner as the access token is validated.
      </t>

        <t>
          For valid requests, the Client Notification Endpoint SHOULD respond with a HTTP 204 No Content.
          The OP SHOULD also accept HTTP 200 OK and any body in the response SHOULD be ignored.
        </t>
        <t>
            The Client MUST NOT return an HTTP 3xx code. The OP MUST NOT follow redirects.
        </t>
        <t>
          How the OP handles HTTP error codes in the ranges of 4xx and 5xx is out-of-scope of this specification.
          Administrative action is like to be needed in these cases.
        </t>
        <figure>
            <preamble>
              The following is a non-normative example of a base64url decoded ID Token sent to the client notification endpoint:
            </preamble>
            <artwork>
              <![CDATA[
    {
      "iss": "http://server.example.com",
      "sub": "248289761001",
      "aud": "s6BhdRkqt3",
      "exp": 1311281970,
      "iat": 1311280970,
      "at_hash": "rXH7QWVTZnXYCou_6Vdpfg",
      "rt_hash": "njCczNMR6mTQQTPa93YPcQ",
      "auth_req_id": "1c266114-a1be-4252-8ad1-04986c5b9ac1"
    }
              ]]>
            </artwork>
          </figure>
          <t>
          </t>

        </section>
      
    </section>

      </section>

      <section anchor="token_error_response" title="Token Error Response">
        <t>
            If the Token Request is invalid or unauthorized, the OpenID Provider constructs the error response according to the section 3.1.3.4 Token Error Response of <xref target="OpenID.Core"/>.
          In addition to the error codes defined in Section 5.2 of <xref target="RFC6749"/>, the following error codes defined in the <xref target="I-D.ietf-oauth-device-flow">OAuth Device Flow</xref> are also applicable:
          </t>
           <t>
            <list style="hanging">
              <t hangText="authorization_pending">
                The authorization request is still pending as the end-user hasn't yet been authenticated. 
              </t>
              <t hangText="slow_down">
                A variant of "authorization_pending", the authorization request is still pending and polling should continue, but the interval MUST be increased by 5 seconds for this and all subsequent requests.
              </t>
              <t hangText="expired_token">
                The auth_req_id has expired. The Client will need to make a new Authentication Request.
              </t>
              <t hangText="access_denied">
                The end user denied the authorization request.
              </t>
             </list>
        </t>       

       <t>
           If the auth_req_id is invalid or was issued to another Client, an <spanx style="verb">invalid_grant</spanx> error MUST be returned as described in Section 5.2 of <xref target="RFC6749"/>.
        </t>

        <t>
           If the Client has registered to use the Push Mode then it MUST NOT call the Token Endpoint with the Backchannel Request Grant Type and the following error is returned.
        </t>
        <t hangText="HTTP 403 Forbidden">
          <list style="hanging">        
            <t hangText="unauthorized_client">
              The Client is not authorized as it is configured in Push Mode
            </t>
          </list>
        </t>       
      </section>

      <section anchor="push_error_payload" title="Push Error Payload">
        <t>
          When Clients are configured to use the Push token delivery mode they can receive error payloads at their Client Notification Endpoint. These errors will be sent using the application/json media type with the following three parameters:
          <list style="hanging">
              <t hangText="error_description">
                OPTIONAL.  Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred.
                Values for the "error_description" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E
              </t>
              <t hangText="error">
                REQUIRED. A single ASCII error code from one present in the list below.
              </t>
              <t hangText="auth_req_id">
                REQUIRED. The authentication request identifier.
              </t>
            </list>
        </t>
        <t>
          Error codes applicable to the push error payload:
           <list style="hanging">
              <t hangText="access_denied">
                The end user denied the authorization request.
              </t>
              <t hangText="expired_token">
                The auth_req_id has expired. The Client will need to make a new Authentication Request. OpenID Providers are not required to send this error, but Clients SHOULD support receiving this error.
              </t>
            </list>
        </t>

      </section>

      <section anchor="auth_error_response" title="Authentication Error Response">
        <t>
          An Authentication Error Response is returned directly from the Backchannel Authentication Endpoint in response to the Authentication Request sent by the Client. The applicable error codes are detailed below (some of which are repurposed from <xref target='RFC6749'>OAuth 2.0</xref> Sections 4.1.2.1 and 5.2).
        </t>
        <t>  
          Authentication Error Responses are sent in the same format as Token Error Responses, i.e. the HTTP response body uses the application/json media type with the following two parameters:
          <list style="hanging">
              <t hangText="error">
                REQUIRED. A single ASCII error code from one present in the list below.
              </t>
              <t hangText="error_description">
                OPTIONAL.  Human-readable ASCII [USASCII] text providing additional information, used to assist the 
                client developer in understanding the error that occurred. Values for the "error_description" parameter 
                MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
              </t>
              <t hangText="error_uri">
                OPTIONAL.  A URI identifying a human-readable web page with information about the error, used to 
                provide the client developer with additional information about the error. Values for the "error_uri" 
                parameter MUST conform to the URI-reference syntax and thus MUST NOT include characters outside the 
                set %x21 / %x23-5B / %x5D-7E.
              </t>
              
          </list>
        </t>
        <t>
          List of authentication error codes associated to HTTP Errors.
        </t>
        <t>
          <list style="hanging">        
            <t hangText="HTTP 400 Bad Request">
                <list style="hanging">        
                    <t hangText="invalid_request">
                      The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once,
                      contains more than one of the hints, or is otherwise malformed.
                    </t>
                    <t hangText="invalid_scope">
                      The requested scope is invalid, unknown, or malformed.
                    </t>
                    <t hangText="expired_login_hint_token">
                       The login_hint_token provided in the authentication request is not valid because it has expired.
                    </t>
                    <t hangText="unknown_user_id">
                      The OpenID Provider is not able to identify which end-user the Client wishes to be authenticated by means of the hint provided in the request (login_hint_token, 
                      id_token_hint or login_hint).
                    </t>
                    <t hangText="unauthorized_client">
                      The Client is not authorized to use this authentication flow.
                    </t>
                </list>
            </t>
            <t hangText="HTTP 401 Unauthorized">
                <list style="hanging">        
                    <t hangText="invalid_client">
                      Client authentication failed (e.g., invalid client credentials, unknown client, no client authentication included, or unsupported authentication method).
                    </t>
                </list>
            </t>
            <t hangText="HTTP 403 Forbidden">
                <list style="hanging">        
                    <t hangText="access_denied">
                      The resource owner or authorization server denied the request. Note that as the authentication error response is received prior to any user interaction, such an error would only be received if a resource owner or authorization server had made a decision to deny a certain type of request or requests from a certain type of client. The mechanism for such a decision to be made in outside the scope of this specification.
                    </t>
                </list>
            </t>
            
          </list>
        </t>         
        <figure> 
          <preamble>The following is a non-normative example from an authentication error response:
          </preamble>
          <artwork>
            <![CDATA[
  HTTP/1.1 400 Bad Request 
  Content-Type: application/json

  {
    "error": "unauthorized_client",
    "error_description":
      "The client 'client.example.org' is not allowed to use CIBA."
  }
            ]]>
          </artwork>
        </figure>      
 
      </section>

    <section title='Pairwise Identifiers'>
        <t>
        If the OpenId Provider uses Pairwise Identifiers then a <spanx style="verb">sector_identifier_uri</spanx> MUST be specified for all Clients using CIBA.
        The Client metadata key <spanx style="verb">sector_identifier_uri</spanx> is specified in section 2 of <xref target="OpenID.Registration"/>.
        </t>
        <t><xref target="OpenID.Core"/> discusses Pairwise Identifier Algorithms in section 8.1.
        </t>
        <t>I
            How Sector Identifier Validation is done at registration time is out-of-scope of this specification.
            Pre-arranged configurations between SP and OpenID Provider are always possible.
            For Dynamic Registration please see <xref target="OpenID.Registration"/>.
            In OpenId Dynamic Registration there is currently no way to automatically validate whether a CIBA client using Polling Mode is allowed to join the group of clients sharing a sector_identifier_uri.
        </t>
    </section>

    <section anchor="security_considerations" title="Security Considerations">
      <t>
        The login hint token SHOULD be digitally signed by the issuer.
        This ensures authenticity of the data and reduces the threat of an injection attack.
        The signature allows the OP to authenticate and authorize the sender of the hint and 
        prevent collecting of phone numbers by rogue Clients.
      </t>
      <t>
      The OP SHOULD ensure that the "client_notification_endpoint" configured at registration time
      is in the administrative authority of the Client.
      Otherwise, the OP would post authentication results to the wrong Client.
      </t>
      <t>
        How this check in done is outside the scope of this specification.
      </t>
      <t>
        id_token_hints cannot be validated using standard JWT processing rules. This is because an 
        expired ID Token could still be a valid id_token_hind, and the OP may no longer have access 
        to the key used to sign the ID Token.
        
        In addition while the OP is the audience for the id_token_hint, the audience claim in 
        the ID Token will be the Client identifier not the OP issuer value, therefore standard 
        audience validation cannot be applied.

        Given these restrictions, implementers should consider only accepting ID Tokens with pairwise 
        subject identifiers, as hints. The OP could then validate that the Client authenticated at 
        the Backchannel Authentication Endpoint was issued the pairwise subject identifier (or shares 
        a Sector Identifier with the Client who was issued the pairwise subject identifier).   
      </t>

    

    </section>

    <section anchor="privacy_considerations" title="Privacy Considerations">
      <t>
        Using MODRNA Client initiated Backchannel Authentication it is possible for the Client 
        to authenticate a user without knowing e.g. the MSISDN of the user.
        Users might be reluctant to provide their MSISDN to Clients because they fear
        misuse through automated calls or theirs number being leaked.
        The login hint token is encrypted in order to protect the user's MSISDN from 
        being revealed to the Client unintentionally.
      </t>

      <t>
        The section <xref target="SimAppletExample" format="title"/> shows an example to illustrate
        the usage of CIBA specification to authenticate a user with a SIM Applet Authenticator.
      </t>
    </section>


    <section anchor="IANA" title="IANA Considerations">

      <section anchor="ietf-oauth-discoveryIANA" title="OAuth Authorization Server Metadata Registration">
        <t>
          This specification requests registration of the following values
          in the IANA "OAuth Authorization Server Metadata" registry of
          <xref target="IANA.OAuth.Parameters"/> established by <xref target="RFC8414"/>.
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style='symbols'>
            <t>Metadata Name: <spanx style="verb">backchannel_token_delivery_modes_supported</spanx></t>
            <t>Metadata Description: Supported CIBA authentication result delivery modes</t>
            <t>Change Controller: OpenID Foundation MODRNA Working Group - openid-specs-mobile-profile@lists.openid.net</t>
            <t>Specification Document(s): <xref target="registration"/> of this document</t>
          </list>
          <?rfc subcompact="no"?>
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style='symbols'>
            <t>Metadata Name: <spanx style="verb">backchannel_authentication_endpoint</spanx></t>
            <t>Metadata Description: CIBA Backchannel Authentication Endpoint</t>
            <t>Change Controller: OpenID Foundation MODRNA Working Group - openid-specs-mobile-profile@lists.openid.net</t>
            <t>Specification Document(s): <xref target="registration"/> of this document</t>
          </list>
          <?rfc subcompact="no"?>
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style='symbols'>
            <t>Metadata Name: <spanx style="verb">backchannel_authentication_request_signing_alg_values_supported</spanx></t>
            <t>Metadata Description: JSON array containing a list of the JWS signing algorithms supported for validation of signed CIBA authentication requests</t>
            <t>Change Controller: OpenID Foundation MODRNA Working Group - openid-specs-mobile-profile@lists.openid.net</t>
            <t>Specification Document(s): <xref target="registration"/> of this document</t>
          </list>
          <?rfc subcompact="no"?>
        </t>
      </section>

      <section anchor="DynRegReg" title="OAuth Dynamic Client Registration Metadata Registration">
        <t>
          This specification requests registration of the following client metadata definitions
          in the IANA "OAuth Dynamic Client Registration Metadata" registry of
          <xref target="IANA.OAuth.Parameters"/>
          established by <xref target="RFC7591"/>:
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style="symbols">
            <t>Client Metadata Name: <spanx style="verb">backchannel_token_delivery_mode</spanx></t>
            <t>Client Metadata Description: CIBA authentication result delivery mode</t>
            <t>Change Controller: OpenID Foundation MODRNA Working Group - openid-specs-mobile-profile@lists.openid.net</t>
            <t>Specification Document(s): <xref target="registration"/> of this document</t>
          </list>
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style="symbols">
            <t>Client Metadata Name: <spanx style="verb">client_notification_endpoint</spanx></t>
            <t>Client Metadata Description: Endpoint to which a notification will be sent after a CIBA end-user authentication event</t>
            <t>Change Controller: OpenID Foundation MODRNA Working Group - openid-specs-mobile-profile@lists.openid.net</t>
            <t>Specification Document(s): <xref target="registration"/> of this document</t>
          </list>
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style="symbols">
            <t>Client Metadata Name: <spanx style="verb">backchannel_authentication_request_signing_alg</spanx></t>
            <t>Client Metadata Description: The JWS algorithm that the client will use to sign CIBA authentication requests</t>
            <t>Change Controller: OpenID Foundation MODRNA Working Group - openid-specs-mobile-profile@lists.openid.net</t>
            <t>Specification Document(s): <xref target="registration"/> of this document</t>
          </list>
        </t>
      </section>

      <section anchor="OAuthParametersReg" title="OAuth Parameters Registration">
        <t>
          This specification requests registration of the following value
          in the IANA "OAuth Parameters" registry of
          <xref target="IANA.OAuth.Parameters"/>
          established by <xref target="RFC6749"/>.
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style='symbols'>
            <t>Parameter name: auth_req_id</t>
            <t>Parameter usage location: token response</t>
            <t>Change Controller: OpenID Foundation MODRNA Working Group - openid-specs-mobile-profile@lists.openid.net</t>
            <t>Specification document(s): <xref target="successful_authentication_request_acknowdlegment"/> of this document</t>
          </list>
        </t>
      </section>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.6750"?>
      <?rfc include="reference.RFC.7519"?> <!-- JWT -->

      <reference anchor="MODRNA.Authentication" target="https://bitbucket.org/openid/mobile/raw/tip/openid-connect-modrna-authentication-1_0.txt">
        <front>
          <title>OpenID Connect MODRNA Authentication Profile 1.0</title>
          <author fullname="Joerg Connotte" initials="J." surname="Connotte">
            <organization abbrev="">Deutsche Telekom AG</organization>
            <address>
              <email>j.connotte@telekom.de</email>
            </address>
          </author>
          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="">Ping Identity</organization>
            <address>
              <email>jbradley@pingidentity.com</email>
            </address>
         </author>
         <date day="07" month="Sep" year="2016" />
        </front>
      </reference>

      &OpenID.Core;
      &OpenID.Registration;
      
      <?rfc include="reference.I-D.draft-ietf-oauth-mtls-11"?>

    </references>
    
    <references title="Informative References">

      <?rfc include="reference.RFC.6749"?>
      <?rfc include='reference.RFC.8414'?> <!-- OAuth AS metadata -->
      <?rfc include="reference.RFC.7591"?> <!-- Client Registration -->

      <?rfc include="reference.I-D.draft-ietf-oauth-device-flow-13"?>

      <reference anchor="IANA.OAuth.Parameters" target="http://www.iana.org/assignments/oauth-parameters">
        <front>
          <title>OAuth Parameters</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date/>
        </front>
      </reference>

      <reference anchor="ETSI102204" target="https://www.etsi.org/deliver/etsi_ts/102200_102299/102204/01.01.04_60/ts_102204v010104p.pdf">
        <front>
          <title>Mobile Commerce (M-COMM) Mobile Signature Service; Web Service Interface</title>
          <author fullname="ETSI TS 102 204 V1.1.4 (2003-08)" initials="ETSI">
            <organization abbrev="ETSI">European Telecommunications Standards Institute</organization>
          </author>
          <date year="2003"/>
        </front>
      </reference>


    </references>

    <section anchor="SimAppletExample" title="Example Flow">
      <t>
        This a non-normative example where a challenge authentication is launched by the OP to an applet that is running in the
        end-user device's SIM. Such applet implements an authenticator that validates a Pin Code entered by the end-user.
      </t>
      <t>
        This authenticator would be implemented through the so-called MSSP (Mobile Signature Subscriber Provider) Server.
        When the Backchannel Authentication Endpoint receives the request to authenticate the user and once it knows the user's MSISDN, it makes a call
        to the MSSP Server which builds a binary Class 2 SMS that is sent to the SIM card of the user where the applet is located.
      </t>

      <t>
        This Class 2 SMS is not really sent directly from the MSSP but through the OTA (Over the air) platform which in turn signs 
        and encrypts the message using a pair of keys (kyc, kyd) unique per each SIM Card.
      </t>
        
      <t>
        Once the message reaches the SIM Card, it is decrypted by the CardManger and the signature is verified (thanks to the same pair of keys: kyc, kyd).
        if everything is ok, the CardManager gives the message to the applet that checks the signature (the another one made by the MSSP) and displays the challenge
        through a popup using the mobile phone native interface) and the user is prompted to enter a Pin Code that is validated locally.
        If the Pin Code is correct, the applet builds an OK response and signs it with the same key used by the MSSP to sign the request, this 
        response is sent as a Class 3 message to the MSSP that checks the signature, and builds the id_token and the access_token to be returned to the Client.
      </t>
      <figure>
        <artwork>
          <![CDATA[

+-----+                    +-----+                      +-------+                 +-----------+          +-------+
| RP  |                    | OP  |                      | MSSP  |                 | SIMApplet |          | User  |
+-----+                    +-----+                      +-------+                 +-----------+          +-------+
   |                          |                             |                           |                    |
   | 1. POST /bc-authorize    |                             |                           |                    |
   |------------------------->|                             |                           |                    |
   |                          |                             |                           |                    |
   |           2. HTTP 200 OK |                             |                           |                    |
   |<-------------------------|                             |                           |                    |
   |                          |                             |                           |                    |
   |                          | 3. Authenticate(MSISDN)     |                           |                    |
   |                          |---------------------------->|                           |                    |
   |                          |                             |                           |                    |
   |                          |                             | 4. Challenge              |                    |
   |                          |                             |-------------------------->|                    |
   |                          |                             |                           |                    |
   |                          |                             |                           | 7. Verify Req      |
   |                          |                             |                           |--------------      |
   |                          |                             |                           |             |      |
   |                          |                             |                           |<-------------      |
   |                          |                             |                           |                    |
   |                          |                             |                           | 8. Challenge       |
   |                          |                             |                           |------------------->|
   |                          |                             |                           |                    |
   |                          |                             |                           |        9. Pin Code |
   |                          |                             |                           |<-------------------|
   |                          |                             |                           |                    |
   |                          |                             |                           | 10. Verify Pin     |
   |                          |                             |                           |---------------     |
   |                          |                             |                           |              |     |
   |                          |                             |                           |<--------------     |
   |                          |                             |                           |                    |
   |                          |                             |           11. Response OK |                    |
   |                          |                             |<--------------------------|                    |
   |                          |                             |                           |                    |
   |                          |                             | 13. Verify Response       |                    |
   |                          |                             |--------------------       |                    |
   |                          |                             |                   |       |                    |
   |                          |                             |<-------------------       |                    |
   |                          |                             |                           |                    |
   |                          |       14. Authentication OK |                           |                    |
   |                          |<----------------------------|                           |                    |
   |                          |                             |                           |                    |
   |                          | 15. Generate Tokens         |                           |                    |
   |                          |--------------------         |                           |                    |
   |                          |                   |         |                           |                    |
   |                          |<-------------------         |                           |                    |
   |                          |                             |                           |                    |
   |             16. POST /cb |                             |                           |                    |
   |<-------------------------|                             |                           |                    |
   |                          |                             |                           |                    |


          ]]>
        </artwork>
      </figure>
      <t>
        Many of the details have advisedly been excluded in order to simplify the flow described. To go into details of how to 
        implement a Mobile Signature Service look at <xref target="ETSI102204" format="title"/>.
      </t>

    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The following have contributed to the development of this specification.</t>
    </section>


    <section anchor="Notices" title="Notices">
      <t>Copyright (c) 2015 The OpenID Foundation.</t>
      <t>
        The OpenID Foundation (OIDF) grants to any Contributor, developer, 
        implementer, or other interested party a non-exclusive, royalty free, 
        worldwide copyright license to reproduce, prepare derivative works from, 
        distribute, perform and display, this Implementers Draft or 
        Final Specification solely for the purposes of (i) developing 
        specifications, and (ii) implementing Implementers Drafts and 
        Final Specifications based on such documents, provided that attribution 
        be made to the OIDF as the source of the material, but that such attribution 
        does not indicate an endorsement by the OIDF.
      </t>
      <t>
        The technology described in this specification was 
        made available from contributions from various sources, 
        including members of the OpenID Foundation and others.  
        Although the OpenID Foundation has taken steps to help ensure 
        that the technology is available for distribution, it takes 
        no position regarding the validity or scope of any intellectual 
        property or other rights that might be claimed to pertain to 
        the implementation or use of the technology described in 
        this specification or the extent to which any license under 
        such rights might or might not be available; neither does it 
        represent that it has made any independent effort to identify 
        any such rights.  The OpenID Foundation and the contributors 
        to this specification make no (and hereby expressly disclaim any) 
        warranties (express, implied, or otherwise), including implied 
        warranties of merchantability, non-infringement, fitness for 
        a particular purpose, or title, related to this specification, 
        and the entire risk as to implementing this specification is 
        assumed by the implementer.  The OpenID Intellectual 
        Property Rights policy requires contributors to offer 
        a patent promise not to assert certain patent claims against 
        other contributors and against implementers.  The OpenID Foundation invites 
        any interested party to bring to its attention any copyrights, 
        patents, patent applications, or other proprietary rights 
        that may cover technology that may be required to practice 
        this specification.
      </t>
    </section>

    <section anchor='History' title='Document History'>
      <t>[[ To be removed from the final specification ]]</t>
      <t>-01 
        <list style='symbols'>
          <t>Initial draft</t>
        </list>
      </t>
      <t>-02 
        <list style='symbols'>
          <t>Second draft</t>
          <t>Authentication Request Section: Improving the definition of <spanx style="verb">client_req_id</spanx></t>
          <t>Successful Authentication Request Acknowledgement:
              a.  <spanx style="verb">auth_req_id</spanx>: to explain that it will not be present in token when using Polling mode
              b.  interval: fixing a misleading description
          </t>
          <t>Token Request Using Polling Mechanism: 
              a.  Fixing a misleading description about the inclusion of <spanx style="verb">client_notification_endpoint</spanx> in the authentication request. 
                  It does not  make sense since Notification or Polling mode is defined at the registration time and <spanx style="verb">client_notification_endpoint</spanx>. 
                  is not sent in the authentication request anymore.
              b. <spanx style="verb">auth_req_id</spanx>: fixing misleading description.
          </t>
          <t>Changing Successful Token Polling to Successful Token Polling Response</t>
          <t>Improving descriptions in Successful Token Polling Response and Successful Token Notification</t>
          <t><spanx style="verb">expires_in</spanx> parameter from Successful Authentication Request Acknowledgement refers to the <spanx style="verb">auth_req_id</spanx> that will be considered overdue 
             to make new polling requests after that time.
          </t>
          <t>New <spanx style="verb">unknown_auth_req_id</spanx> and <spanx style="verb">expired_token</spanx> erros in Token Error Response</t>
          <t>Authentication Error Response section is defined and incorporates two new errors: <spanx style="verb">unknown_user_id</spanx> when OP cannot figure out the user to 
             be authenticated by means of the hint and <spanx style="verb">expired_token</spanx> to indicate that the login_hint_token or id_token_hint provided is expired.
          </t>
          <t>Changing <spanx style="verb">client_req_id</spanx>to <spanx style="verb">client_notification_token</spanx></t>
          <t>New overview section</t>
        </list>
      </t>	  
      <t>-03  
        <list style='symbols'>
          <t>Following the lead of user questioning remove the term Relying Party in most places.</t>
        </list>
      </t>
      <t>-04
        <list style='symbols'>
          <t>The Client MUST be authenticated.</t>
          <t>The Client SHOULD use a signed OpenID Connect Request object.</t>
          <t>3)	The OP MUST support signed OpenID Connect Requests objects and if the validation of the signature fails the request MUST fail.
          If alg == none another method of Client authentication MUST be used </t>
          <t>Added text regarding Pairwise Identifiers.</t>
          <t>Added SIM Applet Authenticator example to illustrate the CIBA flow with an specific authenticator</t>
        </list>
      </t>
      <t>-05
        <list style='symbols'>
          <t>If the OP uses Pairwise Identifiers then registering a sector_identifier_uri at registration time is mandatory.</t>
        </list>
      </t>
      <t>-06
        <list style='symbols'>
          <t>
            If the OP uses Pairwise Identifiers and the Polling Mechanism to retrieve the token, it is necessary to provide a "jwks_uri" at the registration phase and
            it is MANDATORY for the Client to authenticate the token endpoint using one of this two mechanisms: 
            Using Mutual TLS PKI method as defined in section 2.1 of <xref target="I-D.ietf-oauth-mtls"/>
            or using the private_key_jwt method as per the section 9 <eref target="https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication">Client Authentication</eref>
            of the <xref target="OpenID.Core"/>
          </t>
          <t>
            at_hash, rt_hash and auth_requ_id values have been added within the id_token to bind it with the access_token and the auth_req_id.
          </t>
          <t>Change acr_values to be optional in the authentication request and define the parameter inline.</t>
          <t>Clarify that error responses from the Backchannel Authentication Endpoint are as defined in the Authentication Error Response section.</t>
          <t>Be clear that refresh tokens are optional.</t>
          <t>Introduce a third mode for getting the tokens so now there's 1) Poll, 2) Ping and 3) Push.</t>
          <t>Add AS/OP metadata parameter for the Backchannel Authentication Endpoint.</t>
          <t>More clearly define the authentication request format and client authentication to the Backchannel Authentication Endpoint.</t>
        </list>
      </t>
    </section>
  </back>
</rfc>
