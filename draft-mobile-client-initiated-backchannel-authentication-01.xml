<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!--
  NOTE:  This XML file is input used to produce the authoritative copy of an
  OpenID Foundation specification.  The authoritative copy is the HTML output.
  This XML source file is not authoritative.  The statement ipr="none" is
  present only to satisfy the document compilation tool and is not indicative
  of the IPR status of this specification.  The IPR for this specification is
  described in the "Notices" section.  This is a public OpenID Foundation
  document and not a private document, as the private="..." declaration could
  be taken to indicate.
-->
<rfc category="std" docName="draft-mobile-client-initiated-backchannel-authentication-01" ipr="none">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="5" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Draft" ?>
  
  <front>
    <title abbrev="OIDC MODRNA Client initiated Backchannel Authentication Flow 1.0">
            OpenID Connect MODRNA Client initiated Backchannel Authentication Flow 1.0</title>


    <author fullname="Gonzalo Fernandez Rodriguez" initials="G." surname="Fernandez">
      <organization abbrev="Telefonica">Telefonica I+D</organization>
      <address>
        <email>gonzalo.fernandezrodriguez@telefonica.com</email>
      </address>
    </author>


    <author fullname="Florian Walter" initials="F." surname="Walter">
      <organization abbrev="">Deutsche Telekom AG</organization>
      <address>
        <email>F.Walter@telekom.de</email>
      </address>
    </author>


    <date day="18" month="Aug" year="2016"/>
    
    <workgroup>OpenID Mobile Profile Working Group</workgroup>

    <abstract>    
      <t>
        OpenID Connect allows Relying Parties (RP) to authenticate their users for clients of all types, including 
        browser-based JavaScript and native mobile apps, to launch sign-in flows and receive verifiable 
        assertions about the identity of signed-in users.
      </t>
      <t>
        In all of these flows initiated by the RP, the end-user interaction from the consumption device is 
        required and, they are based on HTTP redirection mechanisms. However, some use cases not covered by
        these flows have been raised, where the RP needs to be the initiator of the user authentication flow and the end-user interaction
        from the consumption device is not needed.
      </t>
      <t>
        The MODRNA Client initiated Backchannel Authentication Flow specifies a new authentication flow,
        by means of which the RP's that know the user identifier they want to authenticate (e-mail, phone number),
        will be able to initiate an interaction flow to authenticate their users without having end-user interaction
        from the consumption device.
      </t>
      <t>
        <spanx style="strong">Remark:</spanx> As there is no consumption device through which the end-user is interacting with the Relying Party, 
        this flow will not cause any user credentials to go through the RP. So it should be highlighted that traditional username/password 
        authentication could not be used because only out-band mechanisms will work in conjunction with this flow.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>
        OpenID Connect MODRNA Client initiated Backchannel Authentication Flow 1.0 is an authentication 
        flow of the <xref target="OpenID.Core">OpenID Connect Core 1.0</xref> specification intended to 
        allow RP's who already know the identifier of an end-user to initiate an authentication flow to request 
        user authentication. Moreover it defines Mandatory to Implement features to ensure 
        interoperability of clients.
      </t>
      <section anchor="rnc" title="Requirements Notation and Conventions">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref target="RFC2119"/>.
        </t>

        <t>
          Throughout this document, values are quoted to indicate that they are
          to be taken literally. When using these values in protocol messages, the
          quotes MUST NOT be used as part of the value.
        </t>
      </section>
    </section>
    <section anchor="terminology" title="Terminology">
      <t>
        This specification uses the term "OpenID Provider (OP)" and "Relying Party (RP)" as
        defined by <xref target="OpenID.Core">OpenID Connect Core</xref>.
        This specification also uses the following terms: 
      </t>
      <t>
        <list style="hanging">
         <t hangText="Consumption Device (CD)">
          A user agent, most probably a browser, on which the user consumes the actual service
          provided by the Relying Party.  
         </t>
         <t hangText="Authentication Device (AD)">
          A mobile device on which the user will authenticate the actual login.
         </t>
        </list>
      </t>
    </section>
    <section anchor="overview" title="Overview">
      <t>
        This specification defines a new authentication flow based on <xref target="OpenID.Core"/>.
      </t>
      <t>
        It introduces a new endpoint used to initiate user authentication using a backchannel request. 
        This new endpoint utilizes existing Authentication Requests and defines new parameters as appropriate. 
        For example, it re-uses the scope parameter but it omits nonce, state and redirect_uri, which are needed to 
        perform and secure authentication transactions on the front channel.
      </t>


   <section title='Polling versus Notification'>

      <t>
        This specification allows the RP to get the authentication in two ways: polling and notification.
        The decision is taken at registration time. If the RP wants to be notified it has to specifiy its <xref target="client_notification_endpoint" format="title"/> at registration time.
        Otherwise the authentication response is retrieved by the RP by polling the OP's token endpoint using a new grant type. 
      </t>

<figure>
<preamble>
CIBA polling is illustrated in the following diagram:
</preamble>
<artwork>
+--------+                                               +--------+
|        |                                               |        |
|        |&lt;---(1) CIBA Request--------------------------&gt;|        |
|        |                                               |        |
|        |  +--------+                                   |        |
|        |  |        |                                   |        |
| Client |  |  AD    |&lt;--(2) User interactions ---------&gt;|   OP   |
|        |  |        |                                   |        |
|        |  +--------+                                   |        |
|        |                                               |        |
|        |----(3a) CIBA Polling Request-----------------&gt;|        |
|        |&lt;---(3b) CIBA Polling Response-----------------|        |
|        |                                               |        |
+--------+                                               +--------+
</artwork>
</figure>
      <t>
        If the Client expects to be notified about the authentication result asynchronously then it has to specify a <xref target="client_notification_endpoint" format="title"/> during its registration at the OpenID Provider.
      </t>
<figure>
<preamble>
CIBA notification is illustrated in the following diagram:
</preamble>
<artwork>
+--------+                                               +--------+
|        |                                               |        |
|        |&lt;---(1) CIBA Request--------------------------&gt;|        |
|        |                                               |        |
|        |  +--------+                                   |        |
|        |  |        |                                   |        |
| Client |  |  AD    |&lt;--(2) User interactions ---------&gt;|   OP   |
|        |  |        |                                   |        |
|        |  +--------+                                   |        |
|        |                                               |        |
|        |&lt;---(3) CIBA Notification Callback ------------|        |
|        |                                               |        |
+--------+                                               +--------+
</artwork>
</figure>
    </section>

   <section title='Examples of Use Cases'>
		<t>The following use cases are non-normative examples to illustrate the usage of this specification.</t>
		<t>
		<list style="numbers">
		<t>A call center agent wants to authenticate a caller.
		</t>
		<t>A bank wants to authenticate a customer.
		</t>
		</list>
		</t>
		</section>
    </section>

    <section anchor="auth_backchannel_endpoint" title="Backchannel Authentication Endpoint">
      <t>
        The Backchannel Authentication Endpoint performs Authentication of the End-User. This is done by sending an HTTP
        POST message directly from the Relying Party to the OpenID Provider's Backchannel Authentication Endpoint, using 
        request parameters defined by OAuth 2.0 and additional parameters and parameter values defined by OpenID Connect. 
      </t>
      <t>
        Communication with the Backchannel Authentication Endpoint MUST utilize TLS. See Section 16.17 <xref target="OpenID.Core"/>
        for more information on using TLS.
      </t>

      <section anchor="auth_request" title="Authentication Request">
        <t>
          An Authentication Request is an <xref target="RFC6749">OAuth 2.0</xref> Authorization Request that requests that 
          the End-User be authenticated by the OpenID Provider.
        </t>
        <t>
          MODRNA Client initiated Backchannel Authentication defines an authentication request that is requested directly from 
          the client to the OpenID Provider without going through the user's browser. The client MUST send an authentication 
          request to the OpenID Provider by building an "HTTP POST" request that will take to the OpenID Provider all the 
          information needed to authenticate the user without asking them for their identifier.      
        </t>
        <t>
          The client MUST authenticate to the Backchannel Authentication Endpoint using the authentication method registered for its 
          client_id, as described in Section 9 of  <xref target="OpenID.Core"/>.
        </t>
        <t>
          Authentication Requests are made using the MODRNA profile. Only the following parameters are taking in consideration in the Client initiated Backchannel Authentication flow. The rest of the request parameters defined in <xref target="RFC6749">OAuth 2.0</xref> 
          MUST be ignored by the OpenID Provider.
        </t>

        <t>
          <list style="hanging">
            <t hangText="scope">
              REQUIRED. OpenID Connect implements authentication as an extension to the OAuth 2.0 by including the 
              openid scope value in the Authorization Request.
            </t>
            <t hangText="client_req_id">
              REQUIRED. It is a unique id provided by the RP that will be used by the Identity Provider as a beared 
              token to authenticate the callback request to send the tokens to the RP.
            </t>
            <t>
              At the time of registering in Mobile Connect, the RP must provide the information about whether receiving the token 
              response through a callback to the "client_notification_endpoint" or through a polling mechanism where the RP MUST poll 
              the OpenID Provider repeatedly as defined in <xref target="successful_authentication_request_acknowdlegment" format="title"/>
              until the end-user completes the approval process.
            </t>
            <t hangText="acr_values">
              REQUIRED. As defined in <xref target="MODRNA.Authentication" format="title"/>. 
            </t>

            <t hangText="login_hint_token">
              OPTIONAL. As defined in <xref target="MODRNA.Authentication" format="title"/>.
            </t> 

            <t hangText="id_token_hint">
              OPTIONAL. As defined in Section 3.1.2.1 of <xref target="OpenID.Core"/>.
            </t> 
            <t hangText="login_hint">
              OPTIONAL. As defined in Section 3.1.2.1 of <xref target="OpenID.Core"/>.
            </t> 
            <t hangText="binding_message">
              OPTIONAL. As defined in MODRNA Authentication profile.
            </t>
          </list>
        </t>
        <t>
          As the Client initiated Backchannel Authentication flow does not have an interaction with the end-user through a consumption device, 
          it is REQUIRED that the RP provides one (and only one) of the hints specified above in the authentication request, that is "login_hint_token", 
          "id_token_hint" or "login_hint".
        </t>
        <figure>
          <preamble>The following is a non-normative example from an authentication request (with line wraps within values for display purposes only):
          </preamble>
          <artwork>
            <![CDATA[
              POST /bc-authorize HTTP/1.1
              Host: server.example.com
              Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
              Content-Type: application/json
              {
               "scope": "openid",
               "client_req_id": "8d67dc78-7faa-4d41-aabd-67707b374255",
               "acr_values": "mod-mf",
               "login_hint_token": "eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.
                  OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe
                  ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb
                  Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV
                  mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8
                  1860ppamavo35UgoRdbYaBcoh9QcfylQr66oc6vFWXRcZ_ZT2LawVCWTIy3brGPi
                  6UklfCpIMfIjf7iGdXKHzg.
                  48V1_ALb6US04U3b.
                  5eym8TW_c8SuK0ltJ3rpYIzOeDQz7TALvtu6UG9oMo4vpzs9tX_EFShS8iB7j6ji
                  SdiwkIr3ajwQzaBtQD_A.
                  XFBoMYUZodetZdvTiFvSkQ"
              }
            ]]>
          </artwork>
        </figure>      
      </section>

      <section anchor="auth_request_validation" title="Authentication Request Validation">
        <t>
          The OpenID Provider MUST validate the request received as follows:
        </t>
        <t>
          <list style="numbers">
            <t>
              Authenticate the Client.
              <vspace />
              e.g.: by validating the Client Credentials as described in Section 9 on <xref target="OpenID.Core"/>.
            </t>
            <t>
              The OpenID Provider MUST validate all the OAuth 2.0 parameters according to the MODRNA specification.
            </t>
            <t>
              In the event of a request contains more than one of this hints specified in <xref target="auth_request">Authentication Request</xref>, 
              the Identity provider MUST return an "invalid_request" error response as per Section 3.1.2.6 on <xref target="OpenID.Core"/>.
            </t>
            <t>
              The OpenID Provider MUST validate the hint provided (login_hint, login_token_hint or id_token_hint) and is not expired, otherwise it should return an error to notify that the hint provided has not been found.
            </t>
            <t>
              The OpenID Provider MUST verify that all the REQUIRED parameters are present and their usage conforms to this 
              specification.
            </t>
          </list>
        </t>
        <t>
            As specified in OAuth 2.0 <xref target="RFC6749" />, OpenID Providers SHOULD ignore unrecognized request parameters.
        </t>          
        <t>
            If the OpenID Provider encounters any error, it MUST return an error response, per Section 3.1.2.6 on <xref target="OpenID.Core"/>.
         </t>       
      </section>

      <section anchor="successful_authentication_request_acknowdlegment" title="Successful Authentication Request Acknowledgement">
        <t>
          If the Authentication Validation Request is validated as per Section <xref target="auth_request_validation" format="title"/>, the OpenID Provider will return an HTTP 200 OK response to the RP
          to indicate that the authentication request has been accepted and it is going to be processed. The body of this response 
          will contain:
        </t>
        <t>
          <list style="hanging">
            <t hangText="auth_req_id">
              REQUIRED. It is a unique id to identify the authentication request (transaction) made by the RP. 
              The <spanx style="verb">auth_req_id</spanx> will be sent too in the token through the "client_notification_endpoint" to allow the RP to correlate the authentication request and the received tokens.            
             </t>
            <t hangText="expires in">
              REQUIRED. Expiration time of the Authentication in seconds since the auth_request was received.
             </t>
            <t hangText="interval">
              OPTIONAL. The minimum amount of time in seconds that the client SHOULD wait between polling requests to the token endpoint. This parameter will only be present in case of the authentication request doesn't take the "client_notification_endpoint" parameter or there are not any callback URI registered as "client_notification_endpoint" for the RP.
             </t>
          </list>
        </t>
        <t>
          If the Authentication Validation Request is NOK, the OpenID Provider MUST return an error response, per Section 3.1.2.6.
        </t>      
        <figure>
          <preamble>The following is a non-normative example from an authentication response
          </preamble>
          <artwork>
            <![CDATA[
              HTTP/1.1 200 OK
              Content-Type: application/json
              Cache-Control: no-store
              Pragma: no-cache

              {
                "auth_req_id": "1c266114-a1be-4252-8ad1-04986c5b9ac1",
                "expires_in": 3600,
                "interval": 2
              }
            ]]>
          </artwork>
        </figure>      
      </section>

      <section anchor="auth_request_acknowdlegment_validation" title="Authentication Request Acknowledgment Validation">
        <t>
          If the client (RP) receives an HTTP 200 OK, it MUST validate that all the required parameters are received. The RP should keep the authentication request identifier 
          <spanx style="verb">auth_req_id</spanx> and the expiration time in order to match it with token response.
        </t>
        <t>
          The client will have to keep the expiration time as well to be able to discard the authentication request acknowledgment.
        </t>
      </section>

    </section>

    <section anchor="auth_server_obtains_consent" title="OpenID Provider Obtains End-user Consent/Authorization">
      <t>
        Once the End-User is authenticated, the OpenID Provider MUST obtain an authorization decision before releasing information to the Relying Party. When using the Client initiated Backchannel Authentication flow, there is not any interactive dialogue between the OpenID Provider and the end-user through the consumption device, so the consent establishing only can take place via the authentication device or by establishing consent via conditions for processing the request or other means (for example, via previous administrative consent). Sections 2 and 5.3 of <xref target="OpenID.Core"/> describe information release mechanisms.
      </t>
      <t>
        NOTE: the current version of the Client initiated Backchannel Authentication Flow spec. does not specify any mechanism to use the authentication device to obtain the end-user consent.
      </t>
    </section>

    <section anchor="getting_transaction_result" title="Getting the Transaction Result">
      <section anchor="token_request" title="Token Request Using Polling Mechanism">
        <t>
          When the authentication request doesn't include the "client_notification_endpoint" parameter or there are not any callback URI registered for this notification endpoint for this RP in the Identity Provider, the client must poll the token endpoint until the end-user grants or denies the request.
        </t>
        <t>
          The client polls at reasonable interval which MUST NOT exceed the minimum interval provided by the OpenID Provider via the "interval" parameter (if provided).
        </t>
        <t>
          The client makes a "POST" request to the token endpoint by sending the following parameters using the "application/x-www-form-urlencoded"
          format with a character encoding of UTF-8 in the HTTP request entity-body:
        </t>
        <t>
          <list style="hanging">
            <t hangText="grant_type">
              REQUIRED.  Value MUST be set to "urn:openid:params:modrna:grant-type:backchannel_request".
             </t>
            <t hangText="auth_req_id">
              REQUIRED. It is a unique id to identify the authentication request (transaction) made by the RP. The <spanx style="verb">auth_req_id</spanx> will be sent too in the <xref target="token_response" format="title" /> to allow the RP to correlate the authentication request and the received tokens (id_token and access_token).
             </t>
          </list>
        </t>    
        <figure>
          <preamble>The following is a non-normative example of a token request (with line wraps within values for display purposes only).
          </preamble>
          <artwork>
            <![CDATA[
                POST /token HTTP/1.1
                Host: server.example.com
                Content-Type: application/x-www-form-urlencoded
                Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
                {
                  grant_type="urn:openid:params:modrna:grant-type:backchannel_request"
                  &auth_req_id=1c266114-a1be-4252-8ad1-04986c5b9ac1
                }
            ]]>
          </artwork>
        </figure>
      </section>

      <section anchor="token_response" title="Successful Token Polling">
        <t>
          If the "client_notification_endpoint" is not present the OpenID Provider will return the token as an HTTP response to the RP's poll request. If the user is well authenticated, the OpenID Provider will returns a succesful response that includes an ID Token and an Access Token. Otherwise it responses with an error as defined in <xref target="token_error_response" format="title"/>.
        </t>      
        <figure>
          <preamble>The following is a non-normative example of a token response sending as an HTTP 200 OK Response to the RP's poll request
           (with line wraps within values for display purposes only).
          </preamble>
          <artwork>
            <![CDATA[
                HTTP/1.1 200 OK
                Content-Type: application/json
                Cache-Control: no-store
                Pragma: no-cache

                {
                 "access_token": "SlAV32hkKG",
                 "token_type": "Bearer",
                 "refresh_token": "8xLOxBtZp8",
                 "expires_in": 3600,
                 "id_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc
                   yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5
                   NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ
                   fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz
                   AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q
                   Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ
                   NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd
                   QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS
                   K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4
                   XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg"
                }              
            ]]>
          </artwork>
        </figure>
      </section>    

      <section anchor="token_notification" title="Token Notification">
        <section anchor="issuing_successful_token" title="Successful Token Notification">
          <t>
            When the client is registered for client notifications (through "client_notification_endpoint"), the OpenID Provider will send the token response making a "POST HTTP Request" to the RP's client_notification_endpoint. If the user is well authenticated, the OpenID Provider returns a successful response that includes an ID Token and an Access Token and a Refresh Token. If the request failed client authentication or is invalid, the OpenID Provider sends an error_message as described in <xref target="token_error_response" format="title"/>.
          </t>
          <t>
            All the parameters in the successful response are defined in Section 4.1.4 of OAuth 2.0 [RFC6749] except the new one "auth_req_id" that will be the same received in the request as defined in <xref target="successful_authentication_request_acknowdlegment">Successful Authentication Response</xref>. The response uses the application/json media type.
          </t>
          <figure>
            <preamble>The following is a non-normative example of a token response sending as a HTTP POST request to the callback uri 
              specified in the "client_notification_endpoint" parameter by the RP (with line wraps within values for display purposes only).
              The request is authenticated through a bearer token that is the value of the "client_req_id" provided by the RP in the Authentication Request.
            </preamble>
            <artwork>
              <![CDATA[
                  POST /cb HTTP/1.1
                  Host: client.example.com
                  Authorization: Bearer 8d67dc78-7faa-4d41-aabd-67707b374255
                  Content-Type: application/json
                  { 
                   "auth_req_id": "1c266114-a1be-4252-8ad1-04986c5b9ac1",
                   "access_token": "SlAV32hkKG",
                   "token_type": "Bearer",
                   "refresh_token": "8xLOxBtZp8",
                   "expires_in": 3600,
                   "id_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc
                     yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5
                     NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ
                     fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz
                     AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q
                     Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ
                     NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd
                     QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS
                     K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4
                     XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg"
                  }              
              ]]>
            </artwork>
          </figure>
        </section>
        <section anchor="client_notification_endpoint" title="Client Notification Endpoint">
          <t>
            The Client Notification Endpoint is set by the RP during the registration phase. This endpoint is intended to receive
            the result of the authentication (id_token, access_token and refresh token) and it requires the request to be authenticated 
            using a "bearer token" created by the RP and sent to the OP in the Authentication request as the value of the parameter "client_req_id".
          </t>
          <t>
            Communication with the Client Notification Authentication Endpoint MUST utilize TLS. See Section 16.17 <xref target="OpenID.Core"/> 
            for more information on using TLS.
          </t>

        </section>
      </section>

      <section anchor="token_error_response" title="Token Error Response">
        <t>
           If the Token Request is invalid or unauthorized, the OpenID Provider constructs the error response according to the section 3.1.3.4 Token Error Response of <xref target="OpenID.Core"/>.
           In addition to the error codes defined in Section 5.2 of <xref target="RFC6749"/>, the following error codes are specific for the Client Initiated Backchannel flow:
        </t>
        <t>
          <list style="hanging">
            <t hangText="authorization_pending">
              The authorization request is still pending as the end-user hasn't yet been authenticated.
            </t>
            <t hangText="slow_down">
              The client is polling too quickly and should back off at a reasonable rate.
            </t>
          </list>
        </t>          
      </section>

      <section anchor="auth_error_response" title="Authentication Error Response">
        <t>
          TBD
        </t>
      </section>
    </section>

    <section anchor="security_considerations" title="Security Considerations">
      <t>
        The login hint token SHOULD be digitally signed by the issuer.
        This ensures authenticity of the data and reduces the threat of an injection attack.
        The signature allows the OP to authenicate and authorize the sender of the hint and 
        prevent collecting of phone numbers by rogue clients.
      </t>
    </section>

    <section anchor="privacy_considerations" title="Privacy Considerations">
      <t>
        Using MODRNA Client initiated Backchannel Authentication it is possible for the RP 
        to authenticate a user without knowing e.g. the MSISDN of the user.
        Users might be reluctant to provide their MSISDN to RPs because they fear
        misuse through automated calls or theirs number being leaked.
        The login hint token is encrypted in order to protect the user's MSISDN from 
        being revealed to the RP unintentionally.
      </t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      
      <reference anchor="MODRNA.Authentication" target="https://bitbucket.org/openid/mobile/raw/default/draft-mobile-authentication-01.txt">
        <front>
          <title>OpenID Connect MODRNA Authentication Profile 1.0</title>
          <author fullname="Joerg Connotte" initials="J." surname="Connotte">
            <organization abbrev="">Deutsche Telekom AG</organization>
            <address>
              <email>j.connotte@telekom.de</email>
            </address>
          </author>
          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="">Ping Identity</organization>
            <address>
              <email>jbradley@pingidentity.com</email>
            </address>
         </author>
         <date day="07" month="Sep" year="2016" />
        </front>
      </reference>

      <reference anchor="OpenID.Core" target="https://openid.net/specs/openid-connect-core-1_0.txt">
        <front>
          <title>OpenID Connect Core 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="Illumila">Illumila</organization>
          </author>

          <date day="19" month="December" year="2013"/>
        </front>

        <format target="http://openid.net/specs/openid-connect-core-1_0.html" type="HTML" />
      </reference>

      <?rfc include="reference.I-D.draft-jones-oauth-amr-values-05.xml"?>

    </references>
    
    <references title="Informative References">

      <?rfc include="reference.RFC.6749"?>
      <?rfc include="reference.RFC.3986"?>

    </references>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The following have contributed to the development of this specification.</t>
    </section>


    <section anchor="Notices" title="Notices">
      <t>Copyright (c) 2015 The OpenID Foundation.</t>
      <t>
        The OpenID Foundation (OIDF) grants to any Contributor, developer, 
        implementer, or other interested party a non-exclusive, royalty free, 
        worldwide copyright license to reproduce, prepare derivative works from, 
        distribute, perform and display, this Implementers Draft or 
        Final Specification solely for the purposes of (i) developing 
        specifications, and (ii) implementing Implementers Drafts and 
        Final Specifications based on such documents, provided that attribution 
        be made to the OIDF as the source of the material, but that such attribution 
        does not indicate an endorsement by the OIDF.
      </t>
      <t>
        The technology described in this specification was 
        made available from contributions from various sources, 
        including members of the OpenID Foundation and others.  
        Although the OpenID Foundation has taken steps to help ensure 
        that the technology is available for distribution, it takes 
        no position regarding the validity or scope of any intellectual 
        property or other rights that might be claimed to pertain to 
        the implementation or use of the technology described in 
        this specification or the extent to which any license under 
        such rights might or might not be available; neither does it 
        represent that it has made any independent effort to identify 
        any such rights.  The OpenID Foundation and the contributors 
        to this specification make no (and hereby expressly disclaim any) 
        warranties (express, implied, or otherwise), including implied 
        warranties of merchantability, non-infringement, fitness for 
        a particular purpose, or title, related to this specification, 
        and the entire risk as to implementing this specification is 
        assumed by the implementer.  The OpenID Intellectual 
        Property Rights policy requires contributors to offer 
        a patent promise not to assert certain patent claims against 
        other contributors and against implementers.  The OpenID Foundation invites 
        any interested party to bring to its attention any copyrights, 
        patents, patent applications, or other proprietary rights 
        that may cover technology that may be required to practice 
        this specification.
      </t>
    </section>

    <section anchor="History" title="Document History">
      <t>[[ To be removed from the final specification ]]</t>

      <t>-01 <list style="symbols">
          <t>Initial draft</t>
          <t>Added OIDF Standard Notice </t>
          </list>
      </t>
        
    </section>
  </back>
</rfc>