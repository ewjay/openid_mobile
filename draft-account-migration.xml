<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml2rfc.ietf.org/authoring/rfc2629.dtd">
<!--
  NOTE:  This XML file is input used to produce the authoritative copy of an
  OpenID Foundation specification.  The authoritative copy is the HTML output.
  This XML source file is not authoritative.  The statement ipr="none" is
  present only to satisfy the document compilation tool and is not indicative
  of the IPR status of this specification.  The IPR for this specification is
  described in the "Notices" section.  This is a public OpenID Foundation
  document and not a private document, as the private="..." declaration could
  be taken to indicate.
-->
<rfc category="std" docName="draft-account-migration-01" ipr="none">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="5" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Draft" ?>
  
  <front>
    <title abbrev="OpenID Connect Account Migration 1.0">
            OpenID Connect Account Migration 1.0</title>


    <author fullname="Torsten Lodderstedt" initials="T." surname="Lodderstedt">
      <organization abbrev="">Deutsche Telekom AG</organization>
      <address>
        <email>t.lodderstedt@telekom.de</email>
      </address>
    </author>

<!--	<author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="">Ping Identity</organization>
      <address>
        <email>jbradley@pingidentity.com</email>
      </address>
    </author>
-->
    <date day="25" month="JUNE" year="2016" />
    
    <workgroup>OpenID MODRNA Working Group</workgroup>

    <abstract>    
<t>This document specifies a protocol for migrating user accounts among OpenID Connect OPs. 
The goal is to allow users to migrate between OpenID Connect OPs while retaining access to 
their existing services (RPs). Although the need for such a function was first raised in the context of 
the Mobile Connect initiative (<xref target="MobileConnect"/>), the intend is to design a protocol applicable on a general basis.    
</t>
    </abstract>
  </front>

  <middle>

    <section anchor="Introduction" title="Introduction">
<!-- describe mobile connect challenges and uses cases
generalize problem
introduce solution idea, refer to OpenID 2.0 migration protocol and significant differences two different OPs 
-->
      <t>
	    Mobile Connect uses the mobile phone number to identify a certain user identity. So from a
		user's perspective, the mobile phone number is becoming her digital identity and is used
		to login to a variety of services. 
		</t>
		<t>
		When the respective subscriber changes among mobile network operators, the mobile phone 
		number is typically migrated and can be used with the new Mobile Network Operator (mobile phone number portability).
		And in the same way the user can be reached afterwards via the same mobile phone number as before, 
		users may also expect to retain access to all the services they had logged into with this mobile
		phone number before.
      </t>
	  
	  <t>
	  But even if the subscriber does not migrate her mobile phone number, she may want to retain access
	  to all services they had logged into using the old Mobile Phone Operator's services before. This use case 
      is not bound to Mobile Connect but can be solved for OpenID Connect in general, opening the opportunity
 	  to migrate between all kinds of OpenID OPs, which greatly contributes to the concept of user centricity
	  since users are not locked into a certain OP.
	  </t>
<!-- introduce solution idea, refer to OpenID 2.0 migration protocol and significant differences two different OPs 
--> 
	  
	  <t>
	  From a user's perspective if she logs in to an particular RP with the new OP, she must get access to the 
	  same account with this RP as before. 
	  
	  The technical challenge can be expressed as follows: OpenID Connect assumes full autonomy of every OP regarding 
      the way its user identifier ("sub" claim of an ID token) are created and managed. The OpenID Connect specification does intentionally
	  not define the structure of a user identifier or the mechanisms used to create them. This way every OP can implement 
      user id management the way it suites its needs the best. It also allows to wrap existing user databases with OpenID
	  Connect without the need to migrate user data (on both OP and RP ends). RPs shall treat a subject as opaque string.
	  
	  Global uniqueness is achieved by scoping every user id with the respective OP's identifier ("iss" claim of an ID token).	  

      User ids (i.e. iss + sub) can therefore not simply be transferred among OPs.	  
	  
	  </t>
	  <t>
	  This extension to the OpenID Connect protocol is based on the concepts of the OpenID 2.0 migration protocol 
	  extension (<xref target="OpenID20.Migration"/>). In the OpenID 2.0 migration protocol, the same OP that previously offered OpenID 2.0 now
	  provides identity data to RPs via OpenID Connect. Since the data structures changed between both versions of
	  OpenID, the respective user identifiers at the RPs need to be migrated. This is supported by providing 
	  the RP with both sets of data, the old and the new user id referring to the same user account with the OP.
	  These data is jointly provided in the OpenID Connect authentication response. Based on this data, the RP
	  can identify the user account in its database (using the OpenID 2.0 identifier) and augment it with the 
	  iss and sub claim obtained from the respective id token. 
</t>
<t>
		This specification applies the same principle to the migration of user accounts among OPs. If the user
		has moved its user account to a new OP, this new OP will not only provide its iss and sub for a particular account
		but also the old iss and sub used by the old OP. This 
		additional data is provided in an extension to the OpenID Connect authentication response and allows the 
		RP to identify the respective user account in its database (using the old values for iss and sub) and 
		update the respective user account record to be identified by the new iss and sub. After this update, the RP user 
		account is directly identified (and authenticated) by the sub and iss provided
		by the new OP in subsequent login processes.
	  </t>
	  <t>
	  Care must be taken to ensure this protocol is not used for user account take over. An RP is therefore supposed
	  to perform an user account migration only if the old OP has asserted the transfer of responsibility regarding
	  the user account under consideration to the actual OP. This specification proposes the necessary mechanisms.
	  It also specifies a new API used to transfer user account data among OPs. Clearly, this specification ensures
	  the user is in full control of the whole migration process, especially her consent is needed in order to reveal 
	  user data to the new OP.
	  </t>

	  <t>The following topics or requirements are out of scope of this specification: 
	 <list style="hanging">
		    <t hangText="User Authentication">Users need to be authenticated in the course of the migration as well
			as in the ordinary login process. The means used to authenticate users are at the discretion of the OP and
			out of scope for this specification. The OP could use credentials especially issued for migration, but it 
			could also use other mechanisms available even if the user lost some mechanisms because of the migration 
			(e.g. SIM-based authentication).</t>
			   
            <t hangText="Chained migration">One could image that users change OPs multiple times over a span 
			of several years. Migrating user account data especially for seldomly used RPs will then be a challenge.
			It would require the currently responsible OP to establish a prove chain up to the OP the user used 
			the last time to login. For the time being, this specification will not cover user account migration 
			over more then two OPs.</t>

            <t hangText="OP Account Lifecycle">This specification does not assume a certain lifecycle of the user 
			account object at the old OP. It could be deleted after a certain time (grace period), one could also
			imagine the OP allows the user to continue to use the respective user account. It is assumed the
			old OP invalidates the subject values migrated to the new OP for login processes to RPs.</t>

          </list> 
	  </t>
	  
      <section anchor="rnc" title="Requirements Notation and Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>

        <t>Throughout this document, values are quoted to indicate that they are
        to be taken literally. When using these values in protocol messages, the
        quotes MUST NOT be used as part of the value.</t>
      </section>

      <section anchor="terminology" title="Terminology">
        <t>
          This specification uses the terms "OpenID Provider (OP)" and "Relying Party (RP)" as
          defined by <xref target="OpenID.Core">OpenID Connect Core</xref>.
          This specification also defines the following terms: 
          <list style="hanging">
             <t hangText="OP account">
               A user's account with the OP. This account is characterized by credentials used to login with the OP
			   and certain user identifiers (public as well as pairwise pseudonymous). The latter are asserted by 
			   the OP to RPs in order to authenticate the user to the respective RP.
            </t>
             <t hangText="RP account">
               A user's account with the respective RP. This account is associated with the user's data with the RP 
			   (a service or a collection of services). From an authentication perspective, this account is characterized
			   by a federated user id asserted by a certain OP. This federated user id replaces or supplements local
			   credentials at the RP and is used to authenticate the RP account. In the context of OpenID Connect, 
			   the federated user id is build from the iss and sub claims of the id token asserted in the 
			   OpenID Connect authentication response.
            </t>
          </list>
        </t>
      </section>
    </section>
    
    <section anchor="overview" title="Overview">

    <t>
	An user account is migrated in two steps. First, the OP account is moved from the old OP to the new OP. 
	In this process, the user identifiers associated with the respective OP account are obtained by the new OP 
	and stored in relation to the respective new OP account. In the second step, all RP accounts related to 
	the OP account in migration are migrated "on the fly" while the user is logging in to the respective RP.
	During this stage (which could last for years), the new OP uses the account data obtained in the first phase to provide the RP 
	with the required "old" OP account data as part of the OpenID Connect authentication response. Both processes
	are explained in more detail in the following sub sections.
	</t>
	
	<section anchor="op_account_mig" title="OP account migration">   
	        <figure>
          <preamble>The following figure shows the abstract message flow during the
          OP account migration process. 
		  Note: the new OP takes the role of an 
		  OAuth client trying to get access to the old OP's account migration 
		  endpoint. So the flow is based on the OAuth <xref target="RFC6749"/> abstract protocol 
		  flow.</preamble>

<artwork><![CDATA[
     +---------+                               +-------------+
     |         |<-(A)-- Start Migration -------|             |
     |         |--(B)- Authorization Request ->|    User     |
     |         |<-(C)-- Authorization Grant ---|             |
     |         |                               +-------------+
     |         |                               +---------------------+   
     |         |                               |   Old OP            |
     |         |                               +------------------+  |
     | New OP  |--(D)-- Authorization Grant -->| Tokens Endpoint  |  |
     |         |<-(E)-- Access Token ----------|                  |  |
     |         |                               +------------------+  |
     |         |                               +------------------+  |          
     |         |--(F)-- Request Account Data ->| AccountMigration |  |
     |         |<-(G)--- Account Data ---------|   Endpoint       |  |
     |         |                               +------------------+  |
     |         |                               |                     |                                 
     +---------+                               +---------------------+
]]></artwork>

          <postamble>Figure 1 OP account migration (Abstract Protocol Flow)</postamble>
        </figure>
        <t><list style="empty">
		    <t>(A) The user starts migration explicitly at her new OP. The concrete implementation 
			of this step is out of scope of this specification. The user could for example
               login to a self care portal with the new OP and start the process there. In 
			   this step, the user identifies the new OP either by using the issuer URL
			   or the name of the OP (which is subsequently transformed into the issuer URL).</t>
			   
            <t>(B) The new OP asks the user for permission to obtain her user account data
			from the old OP. From a technical perspective, this abstract protocol message could be 
			implemented by sending an OAuth authorization code request to the old OP's authorization
			endpoint and ask for permission to access the AccountMigration endpoint using a 
			suitable scope value (see below). Other grant types can be used as well. As a pre-requisite 
            for giving her permission, the user needs to authenticate to the old OP. So the
			session with the new OP is bound to the new OP's account whereas the authorization
			grant to obtain the account data is bound to the old OP's user account.</t>

            <t>(C) The new OP receives an authorization grant (e.g. an authorization code).</t>

            <t>(D) The new OP exchanges the authorization grant obtained from the user for 
			an access token (and potentially a refresh token) valid to request the user's OP account data 
			at the ÂccountMigration endpoint of the old OP.</t>

            <t>(E) The old OP's token endpoint issues a suitable access token.</t>

            <t>(F) The new OP requests the OP account's data from the old OP's AccountMigration 
			endpoint. The OP user account is identified by data associated with the access token. </t>

            <t>(G) The old OP provides the new OP with all account data relevant for 
			account migration in the form of digitally signed assertions (JSON Web Tokens see <xref target="RFC7519"/>), 
			which also attest the new OP has taken over responsibility for the respective user identifiers. 
			This ensures the RPs latter on can validate that the new OP is the new legitimate OP for 
			a certain user account.</t>

          </list></t>
         <t>The new OP stores the newly obtained account data with its respective OP account for 
		 latter use during the RP account migration.</t>
		 <t>Note: The new OP may access the AccountMigration endpoint as long as the authorization grant
		 is valid. This could be used to obtain fresh assertions if the originally obtained assertions
		 expired.</t>
	
	</section>
	<section anchor="rp_account_mig" title="RP account migration">
	<t>The RP account migration is performed as part of the login process to a particular RP.
	
	        <list style="empty">
		    <t>(A) The user wants to access a certain RP and logs in with her OP.</t>
			   
            <t>(B) The OP determines whether there is migration data associated with the respective OP 
			account and the respective RP. If so, it adds the respective assertion to the response (OPEN: how is 
			the client identified? potential privacy issue! How often is the OP supposed to provide the 
			migration data to a certain RP? How long is the OP supposed to retain the migration data?)</t>

            <t>(C) The RP processes the authentication response following the rules defined in the OpenID Connect Core 
			specification. It only inspects the additional migration data provided in the authentication response, if it is unable to lookup 
			the RP account using the standard claims iss and sub.</t>

            <t>(D) The migration data is provided as JWT (signed by the old OP) in an additional claim of the ID Token. The RP first 
			verifies the validity of the migration data and uses the old iss and sub from the JWT to determine a matching RP account. 
			If there is such a RP account, the RP changes the values of iss and sub in its database to the new values asserted by the 
			new OP in the id token provided with the authentication response. Note: It is advisable to indicate the migration of the 
			account to the user.</t>
          </list>
	 This concludes the migration of the RP from one OP to another OP. The RP will directly login the user with the RP account 
	 corresponding to the new OP's account in subsequent login processes.
	</t>
	
	</section>
</section>
	<section anchor="account_data" title="AccountMigration Endpoint">
	<t>The AccountMigration Endpoint is exposed by an OpenID Connect OP supporting account migration and is used to transfer 
	user account data from one OP to another OP. </t>
	
	<t>The AccountMigration endpoint provides the new OP with all subject values (public as well as pairwise) of the user account 
	under migration. For every subject value, the old OP issues a signed JWT containing all relevant data, which in turn can be 
	used to prove to a RP that ownership of the account had been migrated to the new OP.</t>
			
	<t>Communication with the AccountMigration Endpoint MUST utilize TLS (<xref target="RFC5246"/>).</t>

	<t>The AccountMigration Endpoint MUST support the use of the HTTP POST methods defined in <xref target="RFC2616"/>.</t>

	<t>This endpoint is OAuth protected, so the new OP needs to acquire a suitable access token before it invokes the endpoint. The 
	proposed scope value to acquire authorization to this endpoint is "account_migration". The AccountMigration Endpoint MUST accept 
	Access Tokens as OAuth 2.0 Bearer Token Usage <xref target="RFC6750"/>.</t>
	
	<section title="Account Migration Data">	
<t>The account migration JWT contains the following claims:
<list style="hanging">
<t hangText="old_iss">Issuer URL of the OP, which asserted the JWT. Basically the same semantics as "iss" in an id token.</t>
<t hangText="old_sub">subject identifier of the respective user account for the RP identified by the claim "aud". 
Basically the same semantics as "subs" in an id token.</t>
<t hangText="sub_type">subject type, may be "pairwise" or "public".</t>
<t hangText="redirect_uri">In case of an pairwise subject, this value contains the redirect URI of the RP, for which the 
OP asserted the subject identifier given in the claim "old_sub".</t>
<t hangText="sector_identifier">In case of an pairwise subject, this claim contains the sector identifier of a group 
of RPs, for which the OP asserted the subject identifier given in the claim "old_sub". redirect_uri and sector_identifier_uri 
are mutual exclusive.</t>
<t hangText="migrated_to">Issuer URL of the OP, the user account has been migrated to. 	The URL is determined based 
on the access token and the corresponding client_id used to invoke the AccountMigration endpoint.</t>
</list></t>

<figure>
<preamble>The following shows an example of a migration data JWT:
</preamble>
            <artwork><![CDATA[{
  "old_iss": "https://op.mno1.com",
  "old_sub": "45445454",
  "sub_type": "pairwise"
  "redirect_uri": "https://creditagency.example.com/oidc",
  "migrated_to": "https://op.mno2.com"
  "exp": 1311281970,
  "iat": 1311280970
}
]]></artwork>
          </figure>	

    <t>Note: Account migration data may only be signed by the old OP using asymmetric algorithms and never encrypted
	since it is supposed to be processed by at least two parties, the new OP and the respective RP.</t>
	
	<t>OPEN: There are several potential ways to identify the client or set of clients a certain ppid is bound to. 
	They all have their pros and cons. Since there is a certain (privacy) risk to expose a ppid to clients, which 
	are not eligible to get to know it, we need to carefully select the right option(s):
<list style="hanging">
<t hangText="redirect_uri">Limited to single client. Works well for HTTP(S)-URLs, rather weak for custom schemes (natives apps) - 
can be impersonated.</t>
<t hangText="sector_identifier">Host component of the registered redirect_uri - bit more flexible - works for HTTP(S) URLs only. </t>
<t hangText="sector_identifier_uri">Points to a JSON file containing all redirect URIs for a certain set of sites and apps under 
common administrative control. Basically same limitation as redirect URI.</t>
<t hangText="software id">Claim of the software statement used in MODRNA registration to identify a certain package (within the scope 
of the issuer of the software statement). In my opinion, this is the only cross-OP way to identify clients. </t>
</list>	</t>
		
<t>OPEN: Do we want/need to also transfer claims and scope values for user info endpoint, the user consented to?</t>

</section>

	<section title="AccountMigration Request">
	<t>The account migration request has no parameters (except the BEARER authorization header carrying the access token). 
	The respective user account and the identity of the client are obtained based on the access token.
			  <figure>
<preamble>The following is an non-normative example request.</preamble>
            <artwork><![CDATA[POST /connect/migrate HTTP/1.1
Host: op.mno1.com
Content-Type: application/x-www-form-urlencoded
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
<postamble>OPEN: Is POST the right verb?I think so since user account state is change at the old OP (subject values are invalidated).</postamble>
          </figure></t>
	</section>
	
	<section title="AccountMigration Response">
     <t>The response is a JSON array, which is composed of signed migration data JWTs, each of them asserting a 
	 particular subject value of the respective OP account. The response  MAY contain a single public subject. It MAY contain 
	 several pairwise pseudonymous subject values, each of them augmented with the respective redirect URI 
	 or sector identifier URI utilized to identify eligible clients in the next migration stage. There MUST be at most one entry 
	 per client identifier.</t>
		  <figure>
		  <preamble>
		  The following is an example response (line breaks are for display purposes only):
		  </preamble>
            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json

["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJod
HRwczovL29wLm1ubzEuY29tIiwic3ViIjoiNDU0NDU0NTQiLCJhdWQiOiJodHRwczovL
2JhbmsuZXhhbXBsZS5jb20vb2lkYyIsIm1pZ3JhdGVkX3RvIjoiaHR0cHM6Ly9vcC5t
bm8yLmNvbSIsImV4cCI6MTMxMTI4MTk3MCwiaWF0IjoxMzExMjgwOTcwfQ.G6ySs3hGt
tmVgVzRTycuAdnxztHZdl3T4D7nRAigEU",
"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodH
RwczovL29wLm1ubzEuY29tIiwic3ViIjoiNjc2NzY3NjYiLCJhdWQiOiJodHRwczovL2
NyZWRpdGFnZW5jeS5leGFtcGxlLmNvbS9vaWRjIiwibWlncmF0ZWRfdG8iOiJodHRwcz
ovL29wLm1ubzIuY29tIiwiZXhwIjoxMzExMjgxOTcwLCpYXQiOjEzMTEyODA5NzB9.w0
9Qd8ngaLLuNMAgyduO589kB8QE3MtPiaZ3yx3DHhs"]
]]></artwork>
          </figure>	 
		  
		<t>The new OP is supposed to process the response as follows: 
<list style="empty">
<t>(1) It needs to verify the digital signature of every JWT as well as the values
of "old_iss" and "migrated_to" for the correct values. In order to verify the digital
signature of the JWT, the new OP obtains the old OP's public key from the OP's 
JSON Web Key Set <xref target="RFC7517"/>) using the process defined 
in <xref target="OpenID.Discovery"/>.</t>
<t>(2) It stores all migration data JWTs "as is" in its database for use during 
migration of the RP accounts of the respective OP account.</t>
</list></t>  
	</section>
	
	<section title="Account Data Error Response">
	<t>errors: unauthorized, account does not exists, ...</t>
	</section>

	</section>
	
	<section anchor="login_ext" title="Authentication response extension">
	<!-- all grant types - just define additional id token claims -->

    <t>The actual migration of a RP user account is performed per RP during the respective login process.</t>

	<t>When generating the authentication response for a particular RP, the new OP verifies, whether 
	it is in possession of an old subject value relevant for the particular RP. There are two different
    cases:
	<list style="hanging">
      <t hangText="Pairwise pseudonymous identifier">The OP is in possession of a pairwise pseudonymous identifier for the respective RP. 
	  Equivalence of RPs is determined by matching the RP's redirect_uris with the the redirect_uri or the sector 
	  identifier in the account migration JWTs of the OP user account under consideration.</t>
      <t hangText="Public identifier">If there is no matching ppid but the data set contains a public identifier, 
	  this identifier is sent back to the RP.</t>
</list>
	</t>

    <t>The migration data is added to the ID token in the new claim migration_data.
<list style="hanging">
      <t hangText="migration_data">This claim contains a single account migration JWT as 
	  obtained from the old OP. It shall demonstrate to the RP that the OP took over responsibility
	  regarding the RP user account from the old OP and it contains the old values of iss and sub.</t>
</list>
		  <figure>
            <preamble>The following is an example response (line breaks are for display purposes only):</preamble>
			 
            <artwork><![CDATA[{
  "iss": "https://op.mno2.com",
  "sub": "676887676767",
  "aud": "client_xyz",
  "migration_data":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL29wLm1ub
  zEuY29tIiwic3ViIjoiNDU0NDU0NTQiLCJhdWQiOiJodHRwczovL2JhbmsuZXhhbXBsZS5jb20vb2lkYyIs
  Im1pZ3JhdGVkX3RvIjoiaHR0cHM6Ly9vcC5tbm8yLmNvbSIsImV4cCI6MTMxMTI4MTk3MCwiaWF0IjoxMzE
  xMjgwOTcwfQ.G6ySs3h-GttmVgVzRTycuAdnxztHZdl3T4D7nRAigEU",
  "exp": 1311281970,
  "iat": 1311280970,
  "auth_time": 1311280969,
  "acr": "urn:mace:incommon:iap:silver"
}
]]></artwork>
          </figure>
	</t>
	
	<t>The RP is supposed to act as follows:</t>
	<t>If the RP does not find a user account within its database using 
the combination of the iss and sub claim, it checks whether there exists a porting_data claim 
in the id token. If that's the case the OP inspects the porting data and attempts to migrate the
user account identified by the porting data JWT within its database to the values asserted by the
id token.</t>

	<t>
		  <figure>
		  <preamble>In the example case, the id token carries a account data claim, which contains the following JWT:</preamble>
            <artwork><![CDATA[{
  "iss": "https://op.mno1.com",
  "sub": "45445454",
  "redirect_uri": "https://creditagency.example.com/oidc",
  "migrated_to": "https://op.mno2.com"
  "exp": 1311281970,
  "iat": 1311280970
}
]]></artwork>
          </figure>
  
</t>

<t>The RP first validates the digital signature of the migration data JWT. It therefore looks up the old OP's 
openid configuration as defined in <xref target="OpenID.Discovery"/> and uses it to obtains the location of 
the old OP's JSON Web Key Set <xref target="RFC7517"/>) (containing the respective public keys of the OP).

          <figure>
            <preamble>For example, given the issuer URL https://op.mno1.com, the new OP would obtain the following OpenID 
			configuration of the old OP from https://op.mno1.com/.well-known/openid-configuration (line breaks are for display purposes
            only):</preamble>
			 
            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
{
  "issuer": "https://op.mno1.com",
  "jwks_uri": "https://op.mno1.com/jwks.json",
 ...
}
]]></artwork>
          </figure>
</t>
<t>
         <figure>
   		 <preamble>It then loads the public keys material, which could for example look like this (line breaks for are for 
		 display purposes only):</preamble>
            <artwork><![CDATA[  
{
 "keys": [
  {
   "kty": "RSA",
   "alg": "RS256",
   "use": "sig",
   "kid": "b040ea9e48fec8dfd6a8859b07553dee18f19636",
   "n": "zewQFS4tqHaofLLOTfliLO3gb1WnmjMYrPlVHPNdJc7WTVO5iuSVV1j5bYH0IvuoikdnBUzV0hjZiEg
   OQVETlCLtXNbi7R54NjaUOSuSBFclNtf8mMXqyB3lz7hfDUPPctdXeOsl-xcfUAvqyVkfEw9FuitB0fsP3zoq
   OEWa_7Kg8F7clSsz_g0fydT63qa1RyOraoF4SvisjyUWNVPsNmSCznQ1dd64y9HbX1ywkbtfqIzEcX--8ToGo
   V9dgBB5VJCGem89TkBv25LzdLIoHgy0YfyXOsmPMf2cDr6eZSiZl53TjL2O8VzMF3J5T7_sFkyruGDf1GoK3a
   lNT5D4YQ",
   "e": "AQAB"
  },
  {
   "kty": "RSA",
   "alg": "RS256",
   "use": "sig",
   "kid": "fc33f33a95ce227b9956398788a49ca83bea7bf5",
   "n": "qMW-G5XetV6bfJ4i6yWLLukttyLAoT3Fw3qz6sqqwRnvuS_StqAnVs7A5fWavcR3_AZimy1fJf9Gz9w
   GS7xtAy_tClHUq3O8Mdixjifl3y0wcIEQpyrAc248ffiha_1YPQWzJvny03H8Pr2ZgOzJlc03A1T9We6z0-R9
   zhL-wXKSpmbv-ZqbCPw7kWLUmb7OpOKPMxOyWMXHIzDEkJLXIATbekOGaltFrgJVjdXihQdYGD5vVtfJQEw2n
   B_k_CPjRmMxixhsuNk3s_3V02CdcZZul_Fs4q3uvEk6iXZQviBmPztGR2fpPJ1RlhnvP4jUl8bVi7mA5_Mpft
   c41tTUJQ",
   "e": "AQAB"
  }
 ]
}
]]></artwork>
<postamble>Note: the appropriate key required for a particular migration data JWT is identified by 
the key identifier (kid).</postamble>
          </figure>

</t>
<t>If the signature has been validated successfully, the RP checks, whether it can find an existing user account in its
database using the combination of iss and sub obtained from the porting data JWT. In the case of the example above, this
would be the the issuer "https://op.mno1.com" and the sub "45445454".</t>
<t>If there is a match, the RP changes the corresponding database values to the values of the claims iss and sub of 
the actual id token. In the example, the respective values would be "https://op.mno2.com" and "676887676767".</t>
<t>After this step, the account of the actual user has effectively been migrated to the new OP. If the same user logs
into the same RP again, the RP would not consider the porting data again because it would sucessfully lookup the local
user account using the iss and sub provided by the new OP.</t>	
	
	<t>OPEN: unsolicited response or shall the RP ask for migration data (like in OpenID 2.0 migration)?</t>
	</section>	
	
	<section anchor="mti" title="Mandatory to Implement Requirements">
	<t>TBD</t>
	</section>  

    <section anchor="security_considerations" title="Security Considerations">
	<t>analyse all kinds of account take over attempts, injection protection for account migration 
	data/potentially requires ID token/audience restriction - compare sub and account data, XSRF, precaution on new OP 
	side to prevent account mix up, injection/replay</t>
    </section>

    <section anchor="privacy_considerations" title="Privacy Considerations">
	    <t>
	TBD
	    </t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>TBD</t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.7517"?>
      <?rfc include="reference.RFC.7519"?>
	  <?rfc include="reference.RFC.2616"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include="reference.RFC.6750"?>
      <?rfc include="reference.RFC.5246"?>	  
	  

      <reference anchor="OpenID.Core" target="http://openid.net/specs/openid-connect-core-1_0.html">
	<front>
	  <title>OpenID Connect Core 1.0</title>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	  </author>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization abbrev="Microsoft">Microsoft</organization>
	  </author>

	  <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
	    <organization abbrev="Google">Google</organization>
	  </author>

	  <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
	    <organization abbrev="Salesforce">Salesforce</organization>
	  </author>

	  <author fullname="Edmund Jay" initials="E." surname="Jay">
	    <organization abbrev="Illumila">Illumila</organization>
	  </author>

	  <date day="19" month="December" year="2013"/>
	</front>

      </reference>	  

      <reference anchor="OpenID.Discovery" target="http://openid.net/specs/openid-connect-discovery-1_0.html">
	<front>
	  <title>OpenID Connect Discovery 1.0</title>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	  </author>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization abbrev="Microsoft">Microsoft</organization>
	  </author>

	  <author fullname="Edmund Jay" initials="E." surname="Jay">
	    <organization abbrev="Illumila">Illumila</organization>
	  </author>

	  <date day="3" month="August" year="2015"/>
	</front>
      </reference>
  
    </references>
    
    <references title="Informative References">  
	  
	  <reference anchor="MobileConnect" target="http://www.gsma.com/personaldata/mobile-connect">
	<front>
	  <title>Mobile Connect</title>
	  	  <author fullname="GSMA">
	    <organization abbrev="GSMA">GSMA</organization>
	  </author>

	  <date year="2016"/>
	</front>
      </reference>
	  
      <reference anchor="OpenID20.Migration" target="http://openid.net/specs/openid-connect-migration-1_0.html">
	<front>
	  <title>OpenID 2.0 to OpenID Connect Migration 1.0</title>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	  </author>

	  <author fullname="Naveen Agarwal" initials="N.A." surname="Agarwal">
	    <organization abbrev="Google">Google</organization>
	  </author>

	  <author fullname="Edmund Jay" initials="E." surname="Jay">
	    <organization abbrev="Illumila">Illumila</organization>
	  </author>

	  <date day="16" month="April" year="2015"/>
	</front>
      </reference>
  

      
    </references>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The following have contributed to the development of this specification.</t>
      <t>
        <list style="empty">
			<t>Jörg Connotte (j.connotte@telekom.de), Deutsche Telekom</t>
			<t>James Manger (James.H.Manger@team.telstra.com), Telstra</t>
			<t>John Bradley (ve7jtb@ve7jtb.com), Ping Identity</t>
        </list>
      </t>
    </section>


    <section anchor="Notices" title="Notices">
      <t>Copyright (c) 2016 The OpenID Foundation.</t>
      <t>
	The OpenID Foundation (OIDF) grants to any Contributor, developer, 
	implementer, or other interested party a non-exclusive, royalty free, 
	worldwide copyright license to reproduce, prepare derivative works from, 
	distribute, perform and display, this Implementers Draft or 
	Final Specification solely for the purposes of (i) developing 
	specifications, and (ii) implementing Implementers Drafts and 
	Final Specifications based on such documents, provided that attribution 
	be made to the OIDF as the source of the material, but that such attribution 
	does not indicate an endorsement by the OIDF.
      </t>
      <t>
	The technology described in this specification was 
	made available from contributions from various sources, 
	including members of the OpenID Foundation and others.  
	Although the OpenID Foundation has taken steps to help ensure 
	that the technology is available for distribution, it takes 
	no position regarding the validity or scope of any intellectual 
	property or other rights that might be claimed to pertain to 
	the implementation or use of the technology described in 
	this specification or the extent to which any license under 
	such rights might or might not be available; neither does it 
	represent that it has made any independent effort to identify 
	any such rights.  The OpenID Foundation and the contributors 
	to this specification make no (and hereby expressly disclaim any) 
	warranties (express, implied, or otherwise), including implied 
	warranties of merchantability, non-infringement, fitness for 
	a particular purpose, or title, related to this specification, 
	and the entire risk as to implementing this specification is 
	assumed by the implementer.  The OpenID Intellectual 
	Property Rights policy requires contributors to offer 
	a patent promise not to assert certain patent claims against 
	other contributors and against implementers.  The OpenID Foundation invites 
	any interested party to bring to its attention any copyrights, 
	patents, patent applications, or other proprietary rights 
	that may cover technology that may be required to practice 
	this specification.
      </t>
    </section>


    <section anchor="History" title="Document History">
      <t>[[ To be removed from the final specification ]]</t>
      <t>-01 <list style="symbols">
          <t>reorganized the draft</t>
		  <t>extended introduction and overview</t>
		  <t>changed terminology from porting to migration</t>
		  <t>changed claim names in migration data to be different from id token claims</t>
		  <t>cleaned up references</t>
        </list>
		</t>

      <t>-00 <list style="symbols">
          <t>Initial draft</t>
        </list>
		</t>
    </section>
  </back>
</rfc>
